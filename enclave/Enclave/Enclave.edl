enclave {

    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"

    include "sgx_tcrypto.h"
    include "sgx_tseal.h"

    struct chacha20_poly1305_encrypted_data {
        size_t data_len;
        [size=data_len] unsigned char* data;
        unsigned char nonce[24];
        unsigned char mac[16];
    };

    trusted {

        public sgx_status_t enclave_generate_new_keypair(
            [out, size=compressed_server_pubkey_size] unsigned char *compressed_server_pubkey, 
            size_t compressed_server_pubkey_size, 
            [in, size=sealed_seed_len] char* sealed_seed, size_t sealed_seed_len,
            [in, out] struct chacha20_poly1305_encrypted_data* encrypted_data);

        public sgx_status_t enclave_generate_nonce(
            [in, size=sealed_seed_len] char* sealed_seed, size_t sealed_seed_len,
            [in] struct chacha20_poly1305_encrypted_data *encrypted_keypair,
            [in, out] struct chacha20_poly1305_encrypted_data *encrypted_secnonce,
            [out, size=server_pubnonce_data_size] unsigned char* server_pubnonce_data, size_t server_pubnonce_data_size);

        sgx_status_t unseal(
            [in, size=sealed_size] char* sealed, size_t sealed_size,
            [out, size=raw_data_size] unsigned char *raw_data, size_t raw_data_size);

        public sgx_status_t enclave_partial_signature(
            [in, size=sealed_seed_len] char* sealed_seed, size_t sealed_seed_len,
            [in] struct chacha20_poly1305_encrypted_data *encrypted_keypair,
            [in] struct chacha20_poly1305_encrypted_data *encrypted_secnonce,
            int negate_seckey,
            [in, size=session_data_size] unsigned char* session_data, size_t session_data_size,
            [in, size=serialized_server_pubnonce_size] unsigned char* serialized_server_pubnonce, size_t serialized_server_pubnonce_size,
            [out, size=partial_sig_data_size] unsigned char *partial_sig_data, size_t partial_sig_data_size
        );

        public sgx_status_t enclave_key_update(
            [in, size=sealed_seed_len] char* sealed_seed, size_t sealed_seed_len,
            [in] struct chacha20_poly1305_encrypted_data *old_encrypted_keypair,
            [in, size=serialized_x1_size] unsigned char* serialized_x1, size_t serialized_x1_size,
            [in, size=serialized_t2_size] unsigned char* serialized_t2, size_t serialized_t2_size,
            [out, size=compressed_server_pubkey_size] unsigned char *compressed_server_pubkey, size_t compressed_server_pubkey_size, 
            [in, out] struct chacha20_poly1305_encrypted_data* new_encrypted_keypair
        );

        public sgx_status_t recover_seed(
            [in, size=sealed_total_share_size] char* sealed_shares, size_t sealed_total_share_size,
            [in, size=num_key_sealed_shares] unsigned char* indexes, size_t num_key_sealed_shares,
            size_t sealed_share_data_size,
            size_t threshold,
            size_t unsealed_size,
            [out, size=sealed_secret_size] char* sealed_secret, size_t sealed_secret_size
        );

        public sgx_status_t sealed_key_from_mnemonics(
            [in, size=xor_secret_len] unsigned char* xor_secret, size_t xor_secret_len,
            [in, size=password_len] unsigned char* password, size_t password_len,
            [out, size=sealed_key_share_size] char* sealed_key_share, size_t sealed_key_share_size
        );

    };

    untrusted {
        void ocall_print_string([in, string] const char *str);
        void ocall_print_int([in, string] const char *str, [in] const int *number);
        void ocall_print_hex([in] const unsigned char** key, [in] const int *keylen);
    };

};
