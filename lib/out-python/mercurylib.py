

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_mercurylib_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_mercurylib_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_mercurylib_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("mercurylib")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_mercurylib_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_mercurylib_checksum_func_create_aggregated_address() != 44269:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_create_and_commit_nonces() != 16584:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_create_cpfp_tx() != 63811:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_create_deposit_msg1() != 9767:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_create_signature() != 53021:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_create_transfer_signature() != 61677:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_create_transfer_update_msg() != 6918:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_decode_statechain_address() != 7125:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_ffi_verify_transfer_signature() != 18534:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_fii_create_transfer_receiver_request_payload() != 58308:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_fii_decrypt_transfer_msg() != 44515:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_fii_validate_tx0_output_pubkey() != 51706:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_fii_verify_latest_backup_tx_pays_to_user_pubkey() != 46083:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_generate_mnemonic() != 62910:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_get_blockheight() != 5222:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_get_new_coin() != 45841:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_get_new_key_info() != 64987:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_get_output_address_from_tx0() != 62309:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_get_partial_sig_request() != 13111:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_get_tx0_outpoint() != 21467:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_get_user_backup_address() != 29075:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_handle_deposit_msg_1_response() != 64110:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_new_backup_transaction() != 56642:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_validate_address() != 16334:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_verify_blinded_musig_scheme() != 42963:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_mercurylib_checksum_func_verify_transaction_signature() != 32006:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU8,
)
class UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI8,
)
class UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU16,
)
class UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI16,
)
class UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU32,
)
class UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI32,
)
class UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU64,
)
class UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI64,
)
class UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF32,
)
class UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF64,
)
class UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructPointer,
)
class UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructRustBuffer,
)
class UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructVoid,
)
_UniffiLib.uniffi_mercurylib_fn_func_create_aggregated_address.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_create_aggregated_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_create_and_commit_nonces.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_create_and_commit_nonces.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_create_cpfp_tx.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_create_cpfp_tx.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_create_deposit_msg1.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_create_deposit_msg1.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_create_signature.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_create_signature.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_create_transfer_signature.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_create_transfer_signature.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_create_transfer_update_msg.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_create_transfer_update_msg.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_decode_statechain_address.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_decode_statechain_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_ffi_verify_transfer_signature.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_ffi_verify_transfer_signature.restype = ctypes.c_int8
_UniffiLib.uniffi_mercurylib_fn_func_fii_create_transfer_receiver_request_payload.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_fii_create_transfer_receiver_request_payload.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_fii_decrypt_transfer_msg.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_fii_decrypt_transfer_msg.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_fii_validate_tx0_output_pubkey.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_fii_validate_tx0_output_pubkey.restype = ctypes.c_int8
_UniffiLib.uniffi_mercurylib_fn_func_fii_verify_latest_backup_tx_pays_to_user_pubkey.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_fii_verify_latest_backup_tx_pays_to_user_pubkey.restype = ctypes.c_int8
_UniffiLib.uniffi_mercurylib_fn_func_generate_mnemonic.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_generate_mnemonic.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_get_blockheight.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_get_blockheight.restype = ctypes.c_uint32
_UniffiLib.uniffi_mercurylib_fn_func_get_new_coin.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_get_new_coin.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_get_new_key_info.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_get_new_key_info.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_get_output_address_from_tx0.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_get_output_address_from_tx0.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_get_partial_sig_request.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.c_uint32,
    ctypes.c_uint32,
    ctypes.c_uint32,
    ctypes.c_uint32,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_get_partial_sig_request.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_get_tx0_outpoint.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_get_tx0_outpoint.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_get_user_backup_address.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_get_user_backup_address.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_handle_deposit_msg_1_response.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_handle_deposit_msg_1_response.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_new_backup_transaction.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_new_backup_transaction.restype = _UniffiRustBuffer
_UniffiLib.uniffi_mercurylib_fn_func_validate_address.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_validate_address.restype = ctypes.c_int8
_UniffiLib.uniffi_mercurylib_fn_func_verify_blinded_musig_scheme.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_verify_blinded_musig_scheme.restype = None
_UniffiLib.uniffi_mercurylib_fn_func_verify_transaction_signature.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint32,
    ctypes.c_uint32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_mercurylib_fn_func_verify_transaction_signature.restype = None
_UniffiLib.ffi_mercurylib_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_mercurylib_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_mercurylib_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rustbuffer_free.restype = None
_UniffiLib.ffi_mercurylib_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_mercurylib_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_u8.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_u8.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_mercurylib_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_i8.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_i8.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_mercurylib_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_u16.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_u16.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_mercurylib_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_i16.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_i16.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_mercurylib_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_u32.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_u32.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_mercurylib_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_i32.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_i32.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_mercurylib_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_u64.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_u64.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_mercurylib_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_i64.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_i64.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_mercurylib_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_f32.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_f32.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_mercurylib_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_f64.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_f64.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_mercurylib_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_pointer.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_mercurylib_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_mercurylib_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_poll_void.restype = None
_UniffiLib.ffi_mercurylib_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_cancel_void.restype = None
_UniffiLib.ffi_mercurylib_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_mercurylib_rust_future_free_void.restype = None
_UniffiLib.ffi_mercurylib_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_mercurylib_rust_future_complete_void.restype = None
_UniffiLib.uniffi_mercurylib_checksum_func_create_aggregated_address.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_create_aggregated_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_create_and_commit_nonces.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_create_and_commit_nonces.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_create_cpfp_tx.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_create_cpfp_tx.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_create_deposit_msg1.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_create_deposit_msg1.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_create_signature.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_create_signature.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_create_transfer_signature.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_create_transfer_signature.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_create_transfer_update_msg.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_create_transfer_update_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_decode_statechain_address.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_decode_statechain_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_ffi_verify_transfer_signature.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_ffi_verify_transfer_signature.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_fii_create_transfer_receiver_request_payload.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_fii_create_transfer_receiver_request_payload.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_fii_decrypt_transfer_msg.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_fii_decrypt_transfer_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_fii_validate_tx0_output_pubkey.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_fii_validate_tx0_output_pubkey.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_fii_verify_latest_backup_tx_pays_to_user_pubkey.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_fii_verify_latest_backup_tx_pays_to_user_pubkey.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_generate_mnemonic.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_generate_mnemonic.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_get_blockheight.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_get_blockheight.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_get_new_coin.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_get_new_coin.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_get_new_key_info.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_get_new_key_info.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_get_output_address_from_tx0.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_get_output_address_from_tx0.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_get_partial_sig_request.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_get_partial_sig_request.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_get_tx0_outpoint.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_get_tx0_outpoint.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_get_user_backup_address.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_get_user_backup_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_handle_deposit_msg_1_response.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_handle_deposit_msg_1_response.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_new_backup_transaction.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_new_backup_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_validate_address.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_validate_address.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_verify_blinded_musig_scheme.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_verify_blinded_musig_scheme.restype = ctypes.c_uint16
_UniffiLib.uniffi_mercurylib_checksum_func_verify_transaction_signature.argtypes = (
)
_UniffiLib.uniffi_mercurylib_checksum_func_verify_transaction_signature.restype = ctypes.c_uint16
_UniffiLib.ffi_mercurylib_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_mercurylib_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write(value, buf):
        buf.write_u8(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def check_lower(value):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))

    @staticmethod
    def write(value, buf):
        buf.write_i32(len(value))
        buf.write(value)


class Activity:
    utxo: "str"
    amount: "int"
    action: "str"
    date: "str"
    @typing.no_type_check
    def __init__(self, *, utxo: "str", amount: "int", action: "str", date: "str"):
        self.utxo = utxo
        self.amount = amount
        self.action = action
        self.date = date

    def __str__(self):
        return "Activity(utxo={}, amount={}, action={}, date={})".format(self.utxo, self.amount, self.action, self.date)

    def __eq__(self, other):
        if self.utxo != other.utxo:
            return False
        if self.amount != other.amount:
            return False
        if self.action != other.action:
            return False
        if self.date != other.date:
            return False
        return True

class _UniffiConverterTypeActivity(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Activity(
            utxo=_UniffiConverterString.read(buf),
            amount=_UniffiConverterUInt32.read(buf),
            action=_UniffiConverterString.read(buf),
            date=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.utxo)
        _UniffiConverterUInt32.check_lower(value.amount)
        _UniffiConverterString.check_lower(value.action)
        _UniffiConverterString.check_lower(value.date)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.utxo, buf)
        _UniffiConverterUInt32.write(value.amount, buf)
        _UniffiConverterString.write(value.action, buf)
        _UniffiConverterString.write(value.date, buf)


class AggregatedPublicKey:
    aggregate_pubkey: "str"
    aggregate_address: "str"
    @typing.no_type_check
    def __init__(self, *, aggregate_pubkey: "str", aggregate_address: "str"):
        self.aggregate_pubkey = aggregate_pubkey
        self.aggregate_address = aggregate_address

    def __str__(self):
        return "AggregatedPublicKey(aggregate_pubkey={}, aggregate_address={})".format(self.aggregate_pubkey, self.aggregate_address)

    def __eq__(self, other):
        if self.aggregate_pubkey != other.aggregate_pubkey:
            return False
        if self.aggregate_address != other.aggregate_address:
            return False
        return True

class _UniffiConverterTypeAggregatedPublicKey(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return AggregatedPublicKey(
            aggregate_pubkey=_UniffiConverterString.read(buf),
            aggregate_address=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.aggregate_pubkey)
        _UniffiConverterString.check_lower(value.aggregate_address)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.aggregate_pubkey, buf)
        _UniffiConverterString.write(value.aggregate_address, buf)


class BackupTx:
    tx_n: "int"
    tx: "str"
    client_public_nonce: "str"
    server_public_nonce: "str"
    client_public_key: "str"
    server_public_key: "str"
    blinding_factor: "str"
    @typing.no_type_check
    def __init__(self, *, tx_n: "int", tx: "str", client_public_nonce: "str", server_public_nonce: "str", client_public_key: "str", server_public_key: "str", blinding_factor: "str"):
        self.tx_n = tx_n
        self.tx = tx
        self.client_public_nonce = client_public_nonce
        self.server_public_nonce = server_public_nonce
        self.client_public_key = client_public_key
        self.server_public_key = server_public_key
        self.blinding_factor = blinding_factor

    def __str__(self):
        return "BackupTx(tx_n={}, tx={}, client_public_nonce={}, server_public_nonce={}, client_public_key={}, server_public_key={}, blinding_factor={})".format(self.tx_n, self.tx, self.client_public_nonce, self.server_public_nonce, self.client_public_key, self.server_public_key, self.blinding_factor)

    def __eq__(self, other):
        if self.tx_n != other.tx_n:
            return False
        if self.tx != other.tx:
            return False
        if self.client_public_nonce != other.client_public_nonce:
            return False
        if self.server_public_nonce != other.server_public_nonce:
            return False
        if self.client_public_key != other.client_public_key:
            return False
        if self.server_public_key != other.server_public_key:
            return False
        if self.blinding_factor != other.blinding_factor:
            return False
        return True

class _UniffiConverterTypeBackupTx(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return BackupTx(
            tx_n=_UniffiConverterUInt32.read(buf),
            tx=_UniffiConverterString.read(buf),
            client_public_nonce=_UniffiConverterString.read(buf),
            server_public_nonce=_UniffiConverterString.read(buf),
            client_public_key=_UniffiConverterString.read(buf),
            server_public_key=_UniffiConverterString.read(buf),
            blinding_factor=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt32.check_lower(value.tx_n)
        _UniffiConverterString.check_lower(value.tx)
        _UniffiConverterString.check_lower(value.client_public_nonce)
        _UniffiConverterString.check_lower(value.server_public_nonce)
        _UniffiConverterString.check_lower(value.client_public_key)
        _UniffiConverterString.check_lower(value.server_public_key)
        _UniffiConverterString.check_lower(value.blinding_factor)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt32.write(value.tx_n, buf)
        _UniffiConverterString.write(value.tx, buf)
        _UniffiConverterString.write(value.client_public_nonce, buf)
        _UniffiConverterString.write(value.server_public_nonce, buf)
        _UniffiConverterString.write(value.client_public_key, buf)
        _UniffiConverterString.write(value.server_public_key, buf)
        _UniffiConverterString.write(value.blinding_factor, buf)


class Coin:
    index: "int"
    user_privkey: "str"
    user_pubkey: "str"
    auth_privkey: "str"
    auth_pubkey: "str"
    derivation_path: "str"
    fingerprint: "str"
    address: "str"
    """
    The coin address is the user_pubkey || auth_pubkey
    Used to transfer the coin to another wallet
    """

    backup_address: "str"
    """
    The backup address is the address used in backup transactions
    The backup address is the p2tr address of the user_pubkey
    """

    server_pubkey: "typing.Optional[str]"
    aggregated_pubkey: "typing.Optional[str]"
    aggregated_address: "typing.Optional[str]"
    """
    The aggregated address is the P2TR address from aggregated_pubkey
    """

    utxo_txid: "typing.Optional[str]"
    utxo_vout: "typing.Optional[int]"
    amount: "typing.Optional[int]"
    statechain_id: "typing.Optional[str]"
    signed_statechain_id: "typing.Optional[str]"
    locktime: "typing.Optional[int]"
    secret_nonce: "typing.Optional[str]"
    public_nonce: "typing.Optional[str]"
    blinding_factor: "typing.Optional[str]"
    server_public_nonce: "typing.Optional[str]"
    tx_cpfp: "typing.Optional[str]"
    tx_withdraw: "typing.Optional[str]"
    withdrawal_address: "typing.Optional[str]"
    status: "CoinStatus"
    @typing.no_type_check
    def __init__(self, *, index: "int", user_privkey: "str", user_pubkey: "str", auth_privkey: "str", auth_pubkey: "str", derivation_path: "str", fingerprint: "str", address: "str", backup_address: "str", server_pubkey: "typing.Optional[str]", aggregated_pubkey: "typing.Optional[str]", aggregated_address: "typing.Optional[str]", utxo_txid: "typing.Optional[str]", utxo_vout: "typing.Optional[int]", amount: "typing.Optional[int]", statechain_id: "typing.Optional[str]", signed_statechain_id: "typing.Optional[str]", locktime: "typing.Optional[int]", secret_nonce: "typing.Optional[str]", public_nonce: "typing.Optional[str]", blinding_factor: "typing.Optional[str]", server_public_nonce: "typing.Optional[str]", tx_cpfp: "typing.Optional[str]", tx_withdraw: "typing.Optional[str]", withdrawal_address: "typing.Optional[str]", status: "CoinStatus"):
        self.index = index
        self.user_privkey = user_privkey
        self.user_pubkey = user_pubkey
        self.auth_privkey = auth_privkey
        self.auth_pubkey = auth_pubkey
        self.derivation_path = derivation_path
        self.fingerprint = fingerprint
        self.address = address
        self.backup_address = backup_address
        self.server_pubkey = server_pubkey
        self.aggregated_pubkey = aggregated_pubkey
        self.aggregated_address = aggregated_address
        self.utxo_txid = utxo_txid
        self.utxo_vout = utxo_vout
        self.amount = amount
        self.statechain_id = statechain_id
        self.signed_statechain_id = signed_statechain_id
        self.locktime = locktime
        self.secret_nonce = secret_nonce
        self.public_nonce = public_nonce
        self.blinding_factor = blinding_factor
        self.server_public_nonce = server_public_nonce
        self.tx_cpfp = tx_cpfp
        self.tx_withdraw = tx_withdraw
        self.withdrawal_address = withdrawal_address
        self.status = status

    def __str__(self):
        return "Coin(index={}, user_privkey={}, user_pubkey={}, auth_privkey={}, auth_pubkey={}, derivation_path={}, fingerprint={}, address={}, backup_address={}, server_pubkey={}, aggregated_pubkey={}, aggregated_address={}, utxo_txid={}, utxo_vout={}, amount={}, statechain_id={}, signed_statechain_id={}, locktime={}, secret_nonce={}, public_nonce={}, blinding_factor={}, server_public_nonce={}, tx_cpfp={}, tx_withdraw={}, withdrawal_address={}, status={})".format(self.index, self.user_privkey, self.user_pubkey, self.auth_privkey, self.auth_pubkey, self.derivation_path, self.fingerprint, self.address, self.backup_address, self.server_pubkey, self.aggregated_pubkey, self.aggregated_address, self.utxo_txid, self.utxo_vout, self.amount, self.statechain_id, self.signed_statechain_id, self.locktime, self.secret_nonce, self.public_nonce, self.blinding_factor, self.server_public_nonce, self.tx_cpfp, self.tx_withdraw, self.withdrawal_address, self.status)

    def __eq__(self, other):
        if self.index != other.index:
            return False
        if self.user_privkey != other.user_privkey:
            return False
        if self.user_pubkey != other.user_pubkey:
            return False
        if self.auth_privkey != other.auth_privkey:
            return False
        if self.auth_pubkey != other.auth_pubkey:
            return False
        if self.derivation_path != other.derivation_path:
            return False
        if self.fingerprint != other.fingerprint:
            return False
        if self.address != other.address:
            return False
        if self.backup_address != other.backup_address:
            return False
        if self.server_pubkey != other.server_pubkey:
            return False
        if self.aggregated_pubkey != other.aggregated_pubkey:
            return False
        if self.aggregated_address != other.aggregated_address:
            return False
        if self.utxo_txid != other.utxo_txid:
            return False
        if self.utxo_vout != other.utxo_vout:
            return False
        if self.amount != other.amount:
            return False
        if self.statechain_id != other.statechain_id:
            return False
        if self.signed_statechain_id != other.signed_statechain_id:
            return False
        if self.locktime != other.locktime:
            return False
        if self.secret_nonce != other.secret_nonce:
            return False
        if self.public_nonce != other.public_nonce:
            return False
        if self.blinding_factor != other.blinding_factor:
            return False
        if self.server_public_nonce != other.server_public_nonce:
            return False
        if self.tx_cpfp != other.tx_cpfp:
            return False
        if self.tx_withdraw != other.tx_withdraw:
            return False
        if self.withdrawal_address != other.withdrawal_address:
            return False
        if self.status != other.status:
            return False
        return True

class _UniffiConverterTypeCoin(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Coin(
            index=_UniffiConverterUInt32.read(buf),
            user_privkey=_UniffiConverterString.read(buf),
            user_pubkey=_UniffiConverterString.read(buf),
            auth_privkey=_UniffiConverterString.read(buf),
            auth_pubkey=_UniffiConverterString.read(buf),
            derivation_path=_UniffiConverterString.read(buf),
            fingerprint=_UniffiConverterString.read(buf),
            address=_UniffiConverterString.read(buf),
            backup_address=_UniffiConverterString.read(buf),
            server_pubkey=_UniffiConverterOptionalString.read(buf),
            aggregated_pubkey=_UniffiConverterOptionalString.read(buf),
            aggregated_address=_UniffiConverterOptionalString.read(buf),
            utxo_txid=_UniffiConverterOptionalString.read(buf),
            utxo_vout=_UniffiConverterOptionalUInt32.read(buf),
            amount=_UniffiConverterOptionalUInt32.read(buf),
            statechain_id=_UniffiConverterOptionalString.read(buf),
            signed_statechain_id=_UniffiConverterOptionalString.read(buf),
            locktime=_UniffiConverterOptionalUInt32.read(buf),
            secret_nonce=_UniffiConverterOptionalString.read(buf),
            public_nonce=_UniffiConverterOptionalString.read(buf),
            blinding_factor=_UniffiConverterOptionalString.read(buf),
            server_public_nonce=_UniffiConverterOptionalString.read(buf),
            tx_cpfp=_UniffiConverterOptionalString.read(buf),
            tx_withdraw=_UniffiConverterOptionalString.read(buf),
            withdrawal_address=_UniffiConverterOptionalString.read(buf),
            status=_UniffiConverterTypeCoinStatus.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt32.check_lower(value.index)
        _UniffiConverterString.check_lower(value.user_privkey)
        _UniffiConverterString.check_lower(value.user_pubkey)
        _UniffiConverterString.check_lower(value.auth_privkey)
        _UniffiConverterString.check_lower(value.auth_pubkey)
        _UniffiConverterString.check_lower(value.derivation_path)
        _UniffiConverterString.check_lower(value.fingerprint)
        _UniffiConverterString.check_lower(value.address)
        _UniffiConverterString.check_lower(value.backup_address)
        _UniffiConverterOptionalString.check_lower(value.server_pubkey)
        _UniffiConverterOptionalString.check_lower(value.aggregated_pubkey)
        _UniffiConverterOptionalString.check_lower(value.aggregated_address)
        _UniffiConverterOptionalString.check_lower(value.utxo_txid)
        _UniffiConverterOptionalUInt32.check_lower(value.utxo_vout)
        _UniffiConverterOptionalUInt32.check_lower(value.amount)
        _UniffiConverterOptionalString.check_lower(value.statechain_id)
        _UniffiConverterOptionalString.check_lower(value.signed_statechain_id)
        _UniffiConverterOptionalUInt32.check_lower(value.locktime)
        _UniffiConverterOptionalString.check_lower(value.secret_nonce)
        _UniffiConverterOptionalString.check_lower(value.public_nonce)
        _UniffiConverterOptionalString.check_lower(value.blinding_factor)
        _UniffiConverterOptionalString.check_lower(value.server_public_nonce)
        _UniffiConverterOptionalString.check_lower(value.tx_cpfp)
        _UniffiConverterOptionalString.check_lower(value.tx_withdraw)
        _UniffiConverterOptionalString.check_lower(value.withdrawal_address)
        _UniffiConverterTypeCoinStatus.check_lower(value.status)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt32.write(value.index, buf)
        _UniffiConverterString.write(value.user_privkey, buf)
        _UniffiConverterString.write(value.user_pubkey, buf)
        _UniffiConverterString.write(value.auth_privkey, buf)
        _UniffiConverterString.write(value.auth_pubkey, buf)
        _UniffiConverterString.write(value.derivation_path, buf)
        _UniffiConverterString.write(value.fingerprint, buf)
        _UniffiConverterString.write(value.address, buf)
        _UniffiConverterString.write(value.backup_address, buf)
        _UniffiConverterOptionalString.write(value.server_pubkey, buf)
        _UniffiConverterOptionalString.write(value.aggregated_pubkey, buf)
        _UniffiConverterOptionalString.write(value.aggregated_address, buf)
        _UniffiConverterOptionalString.write(value.utxo_txid, buf)
        _UniffiConverterOptionalUInt32.write(value.utxo_vout, buf)
        _UniffiConverterOptionalUInt32.write(value.amount, buf)
        _UniffiConverterOptionalString.write(value.statechain_id, buf)
        _UniffiConverterOptionalString.write(value.signed_statechain_id, buf)
        _UniffiConverterOptionalUInt32.write(value.locktime, buf)
        _UniffiConverterOptionalString.write(value.secret_nonce, buf)
        _UniffiConverterOptionalString.write(value.public_nonce, buf)
        _UniffiConverterOptionalString.write(value.blinding_factor, buf)
        _UniffiConverterOptionalString.write(value.server_public_nonce, buf)
        _UniffiConverterOptionalString.write(value.tx_cpfp, buf)
        _UniffiConverterOptionalString.write(value.tx_withdraw, buf)
        _UniffiConverterOptionalString.write(value.withdrawal_address, buf)
        _UniffiConverterTypeCoinStatus.write(value.status, buf)


class CoinNonce:
    secret_nonce: "str"
    public_nonce: "str"
    blinding_factor: "str"
    sign_first_request_payload: "SignFirstRequestPayload"
    @typing.no_type_check
    def __init__(self, *, secret_nonce: "str", public_nonce: "str", blinding_factor: "str", sign_first_request_payload: "SignFirstRequestPayload"):
        self.secret_nonce = secret_nonce
        self.public_nonce = public_nonce
        self.blinding_factor = blinding_factor
        self.sign_first_request_payload = sign_first_request_payload

    def __str__(self):
        return "CoinNonce(secret_nonce={}, public_nonce={}, blinding_factor={}, sign_first_request_payload={})".format(self.secret_nonce, self.public_nonce, self.blinding_factor, self.sign_first_request_payload)

    def __eq__(self, other):
        if self.secret_nonce != other.secret_nonce:
            return False
        if self.public_nonce != other.public_nonce:
            return False
        if self.blinding_factor != other.blinding_factor:
            return False
        if self.sign_first_request_payload != other.sign_first_request_payload:
            return False
        return True

class _UniffiConverterTypeCoinNonce(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CoinNonce(
            secret_nonce=_UniffiConverterString.read(buf),
            public_nonce=_UniffiConverterString.read(buf),
            blinding_factor=_UniffiConverterString.read(buf),
            sign_first_request_payload=_UniffiConverterTypeSignFirstRequestPayload.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.secret_nonce)
        _UniffiConverterString.check_lower(value.public_nonce)
        _UniffiConverterString.check_lower(value.blinding_factor)
        _UniffiConverterTypeSignFirstRequestPayload.check_lower(value.sign_first_request_payload)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.secret_nonce, buf)
        _UniffiConverterString.write(value.public_nonce, buf)
        _UniffiConverterString.write(value.blinding_factor, buf)
        _UniffiConverterTypeSignFirstRequestPayload.write(value.sign_first_request_payload, buf)


class CoinStatusParseError:

    def __str__(self):
        return "CoinStatusParseError()".format()

    def __eq__(self, other):
        return True

class _UniffiConverterTypeCoinStatusParseError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CoinStatusParseError(
        )

    @staticmethod
    def check_lower(value):
        pass

    @staticmethod
    def write(value, buf):
        pass


class DecodedScAddress:
    version: "int"
    user_pubkey: "str"
    auth_pubkey: "str"
    @typing.no_type_check
    def __init__(self, *, version: "int", user_pubkey: "str", auth_pubkey: "str"):
        self.version = version
        self.user_pubkey = user_pubkey
        self.auth_pubkey = auth_pubkey

    def __str__(self):
        return "DecodedScAddress(version={}, user_pubkey={}, auth_pubkey={})".format(self.version, self.user_pubkey, self.auth_pubkey)

    def __eq__(self, other):
        if self.version != other.version:
            return False
        if self.user_pubkey != other.user_pubkey:
            return False
        if self.auth_pubkey != other.auth_pubkey:
            return False
        return True

class _UniffiConverterTypeDecodedSCAddress(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DecodedScAddress(
            version=_UniffiConverterUInt8.read(buf),
            user_pubkey=_UniffiConverterString.read(buf),
            auth_pubkey=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt8.check_lower(value.version)
        _UniffiConverterString.check_lower(value.user_pubkey)
        _UniffiConverterString.check_lower(value.auth_pubkey)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt8.write(value.version, buf)
        _UniffiConverterString.write(value.user_pubkey, buf)
        _UniffiConverterString.write(value.auth_pubkey, buf)


class DepositInitResult:
    server_pubkey: "str"
    statechain_id: "str"
    signed_statechain_id: "str"
    @typing.no_type_check
    def __init__(self, *, server_pubkey: "str", statechain_id: "str", signed_statechain_id: "str"):
        self.server_pubkey = server_pubkey
        self.statechain_id = statechain_id
        self.signed_statechain_id = signed_statechain_id

    def __str__(self):
        return "DepositInitResult(server_pubkey={}, statechain_id={}, signed_statechain_id={})".format(self.server_pubkey, self.statechain_id, self.signed_statechain_id)

    def __eq__(self, other):
        if self.server_pubkey != other.server_pubkey:
            return False
        if self.statechain_id != other.statechain_id:
            return False
        if self.signed_statechain_id != other.signed_statechain_id:
            return False
        return True

class _UniffiConverterTypeDepositInitResult(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DepositInitResult(
            server_pubkey=_UniffiConverterString.read(buf),
            statechain_id=_UniffiConverterString.read(buf),
            signed_statechain_id=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.server_pubkey)
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterString.check_lower(value.signed_statechain_id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.server_pubkey, buf)
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterString.write(value.signed_statechain_id, buf)


class DepositMsg1:
    auth_key: "str"
    token_id: "str"
    signed_token_id: "str"
    @typing.no_type_check
    def __init__(self, *, auth_key: "str", token_id: "str", signed_token_id: "str"):
        self.auth_key = auth_key
        self.token_id = token_id
        self.signed_token_id = signed_token_id

    def __str__(self):
        return "DepositMsg1(auth_key={}, token_id={}, signed_token_id={})".format(self.auth_key, self.token_id, self.signed_token_id)

    def __eq__(self, other):
        if self.auth_key != other.auth_key:
            return False
        if self.token_id != other.token_id:
            return False
        if self.signed_token_id != other.signed_token_id:
            return False
        return True

class _UniffiConverterTypeDepositMsg1(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DepositMsg1(
            auth_key=_UniffiConverterString.read(buf),
            token_id=_UniffiConverterString.read(buf),
            signed_token_id=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.auth_key)
        _UniffiConverterString.check_lower(value.token_id)
        _UniffiConverterString.check_lower(value.signed_token_id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.auth_key, buf)
        _UniffiConverterString.write(value.token_id, buf)
        _UniffiConverterString.write(value.signed_token_id, buf)


class DepositMsg1Response:
    server_pubkey: "str"
    statechain_id: "str"
    @typing.no_type_check
    def __init__(self, *, server_pubkey: "str", statechain_id: "str"):
        self.server_pubkey = server_pubkey
        self.statechain_id = statechain_id

    def __str__(self):
        return "DepositMsg1Response(server_pubkey={}, statechain_id={})".format(self.server_pubkey, self.statechain_id)

    def __eq__(self, other):
        if self.server_pubkey != other.server_pubkey:
            return False
        if self.statechain_id != other.statechain_id:
            return False
        return True

class _UniffiConverterTypeDepositMsg1Response(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DepositMsg1Response(
            server_pubkey=_UniffiConverterString.read(buf),
            statechain_id=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.server_pubkey)
        _UniffiConverterString.check_lower(value.statechain_id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.server_pubkey, buf)
        _UniffiConverterString.write(value.statechain_id, buf)


class FfiTransferMsg:
    statechain_id: "str"
    transfer_signature: "str"
    backup_transactions: "typing.List[BackupTx]"
    t1: "bytes"
    user_public_key: "str"
    @typing.no_type_check
    def __init__(self, *, statechain_id: "str", transfer_signature: "str", backup_transactions: "typing.List[BackupTx]", t1: "bytes", user_public_key: "str"):
        self.statechain_id = statechain_id
        self.transfer_signature = transfer_signature
        self.backup_transactions = backup_transactions
        self.t1 = t1
        self.user_public_key = user_public_key

    def __str__(self):
        return "FfiTransferMsg(statechain_id={}, transfer_signature={}, backup_transactions={}, t1={}, user_public_key={})".format(self.statechain_id, self.transfer_signature, self.backup_transactions, self.t1, self.user_public_key)

    def __eq__(self, other):
        if self.statechain_id != other.statechain_id:
            return False
        if self.transfer_signature != other.transfer_signature:
            return False
        if self.backup_transactions != other.backup_transactions:
            return False
        if self.t1 != other.t1:
            return False
        if self.user_public_key != other.user_public_key:
            return False
        return True

class _UniffiConverterTypeFFITransferMsg(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return FfiTransferMsg(
            statechain_id=_UniffiConverterString.read(buf),
            transfer_signature=_UniffiConverterString.read(buf),
            backup_transactions=_UniffiConverterSequenceTypeBackupTx.read(buf),
            t1=_UniffiConverterBytes.read(buf),
            user_public_key=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterString.check_lower(value.transfer_signature)
        _UniffiConverterSequenceTypeBackupTx.check_lower(value.backup_transactions)
        _UniffiConverterBytes.check_lower(value.t1)
        _UniffiConverterString.check_lower(value.user_public_key)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterString.write(value.transfer_signature, buf)
        _UniffiConverterSequenceTypeBackupTx.write(value.backup_transactions, buf)
        _UniffiConverterBytes.write(value.t1, buf)
        _UniffiConverterString.write(value.user_public_key, buf)


class GetMsgAddrResponsePayload:
    list_enc_transfer_msg: "typing.List[str]"
    @typing.no_type_check
    def __init__(self, *, list_enc_transfer_msg: "typing.List[str]"):
        self.list_enc_transfer_msg = list_enc_transfer_msg

    def __str__(self):
        return "GetMsgAddrResponsePayload(list_enc_transfer_msg={})".format(self.list_enc_transfer_msg)

    def __eq__(self, other):
        if self.list_enc_transfer_msg != other.list_enc_transfer_msg:
            return False
        return True

class _UniffiConverterTypeGetMsgAddrResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return GetMsgAddrResponsePayload(
            list_enc_transfer_msg=_UniffiConverterSequenceString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterSequenceString.check_lower(value.list_enc_transfer_msg)

    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceString.write(value.list_enc_transfer_msg, buf)


class InfoConfig:
    initlock: "int"
    interval: "int"
    fee_rate_sats_per_byte: "int"
    @typing.no_type_check
    def __init__(self, *, initlock: "int", interval: "int", fee_rate_sats_per_byte: "int"):
        self.initlock = initlock
        self.interval = interval
        self.fee_rate_sats_per_byte = fee_rate_sats_per_byte

    def __str__(self):
        return "InfoConfig(initlock={}, interval={}, fee_rate_sats_per_byte={})".format(self.initlock, self.interval, self.fee_rate_sats_per_byte)

    def __eq__(self, other):
        if self.initlock != other.initlock:
            return False
        if self.interval != other.interval:
            return False
        if self.fee_rate_sats_per_byte != other.fee_rate_sats_per_byte:
            return False
        return True

class _UniffiConverterTypeInfoConfig(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return InfoConfig(
            initlock=_UniffiConverterUInt32.read(buf),
            interval=_UniffiConverterUInt32.read(buf),
            fee_rate_sats_per_byte=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt32.check_lower(value.initlock)
        _UniffiConverterUInt32.check_lower(value.interval)
        _UniffiConverterUInt64.check_lower(value.fee_rate_sats_per_byte)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt32.write(value.initlock, buf)
        _UniffiConverterUInt32.write(value.interval, buf)
        _UniffiConverterUInt64.write(value.fee_rate_sats_per_byte, buf)


class KeyListResponsePayload:
    list_keyinfo: "typing.List[PubKeyInfo]"
    @typing.no_type_check
    def __init__(self, *, list_keyinfo: "typing.List[PubKeyInfo]"):
        self.list_keyinfo = list_keyinfo

    def __str__(self):
        return "KeyListResponsePayload(list_keyinfo={})".format(self.list_keyinfo)

    def __eq__(self, other):
        if self.list_keyinfo != other.list_keyinfo:
            return False
        return True

class _UniffiConverterTypeKeyListResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return KeyListResponsePayload(
            list_keyinfo=_UniffiConverterSequenceTypePubKeyInfo.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterSequenceTypePubKeyInfo.check_lower(value.list_keyinfo)

    @staticmethod
    def write(value, buf):
        _UniffiConverterSequenceTypePubKeyInfo.write(value.list_keyinfo, buf)


class KeyUpdateResponsePayload:
    statechain_id: "str"
    t2: "str"
    x1: "str"
    @typing.no_type_check
    def __init__(self, *, statechain_id: "str", t2: "str", x1: "str"):
        self.statechain_id = statechain_id
        self.t2 = t2
        self.x1 = x1

    def __str__(self):
        return "KeyUpdateResponsePayload(statechain_id={}, t2={}, x1={})".format(self.statechain_id, self.t2, self.x1)

    def __eq__(self, other):
        if self.statechain_id != other.statechain_id:
            return False
        if self.t2 != other.t2:
            return False
        if self.x1 != other.x1:
            return False
        return True

class _UniffiConverterTypeKeyUpdateResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return KeyUpdateResponsePayload(
            statechain_id=_UniffiConverterString.read(buf),
            t2=_UniffiConverterString.read(buf),
            x1=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterString.check_lower(value.t2)
        _UniffiConverterString.check_lower(value.x1)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterString.write(value.t2, buf)
        _UniffiConverterString.write(value.x1, buf)


class NewKeyInfo:
    aggregate_pubkey: "str"
    aggregate_address: "str"
    signed_statechain_id: "str"
    amount: "int"
    @typing.no_type_check
    def __init__(self, *, aggregate_pubkey: "str", aggregate_address: "str", signed_statechain_id: "str", amount: "int"):
        self.aggregate_pubkey = aggregate_pubkey
        self.aggregate_address = aggregate_address
        self.signed_statechain_id = signed_statechain_id
        self.amount = amount

    def __str__(self):
        return "NewKeyInfo(aggregate_pubkey={}, aggregate_address={}, signed_statechain_id={}, amount={})".format(self.aggregate_pubkey, self.aggregate_address, self.signed_statechain_id, self.amount)

    def __eq__(self, other):
        if self.aggregate_pubkey != other.aggregate_pubkey:
            return False
        if self.aggregate_address != other.aggregate_address:
            return False
        if self.signed_statechain_id != other.signed_statechain_id:
            return False
        if self.amount != other.amount:
            return False
        return True

class _UniffiConverterTypeNewKeyInfo(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return NewKeyInfo(
            aggregate_pubkey=_UniffiConverterString.read(buf),
            aggregate_address=_UniffiConverterString.read(buf),
            signed_statechain_id=_UniffiConverterString.read(buf),
            amount=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.aggregate_pubkey)
        _UniffiConverterString.check_lower(value.aggregate_address)
        _UniffiConverterString.check_lower(value.signed_statechain_id)
        _UniffiConverterUInt32.check_lower(value.amount)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.aggregate_pubkey, buf)
        _UniffiConverterString.write(value.aggregate_address, buf)
        _UniffiConverterString.write(value.signed_statechain_id, buf)
        _UniffiConverterUInt32.write(value.amount, buf)


class PartialSignatureMsg1:
    msg: "str"
    output_pubkey: "str"
    client_partial_sig: "str"
    encoded_session: "str"
    encoded_unsigned_tx: "str"
    partial_signature_request_payload: "PartialSignatureRequestPayload"
    @typing.no_type_check
    def __init__(self, *, msg: "str", output_pubkey: "str", client_partial_sig: "str", encoded_session: "str", encoded_unsigned_tx: "str", partial_signature_request_payload: "PartialSignatureRequestPayload"):
        self.msg = msg
        self.output_pubkey = output_pubkey
        self.client_partial_sig = client_partial_sig
        self.encoded_session = encoded_session
        self.encoded_unsigned_tx = encoded_unsigned_tx
        self.partial_signature_request_payload = partial_signature_request_payload

    def __str__(self):
        return "PartialSignatureMsg1(msg={}, output_pubkey={}, client_partial_sig={}, encoded_session={}, encoded_unsigned_tx={}, partial_signature_request_payload={})".format(self.msg, self.output_pubkey, self.client_partial_sig, self.encoded_session, self.encoded_unsigned_tx, self.partial_signature_request_payload)

    def __eq__(self, other):
        if self.msg != other.msg:
            return False
        if self.output_pubkey != other.output_pubkey:
            return False
        if self.client_partial_sig != other.client_partial_sig:
            return False
        if self.encoded_session != other.encoded_session:
            return False
        if self.encoded_unsigned_tx != other.encoded_unsigned_tx:
            return False
        if self.partial_signature_request_payload != other.partial_signature_request_payload:
            return False
        return True

class _UniffiConverterTypePartialSignatureMsg1(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PartialSignatureMsg1(
            msg=_UniffiConverterString.read(buf),
            output_pubkey=_UniffiConverterString.read(buf),
            client_partial_sig=_UniffiConverterString.read(buf),
            encoded_session=_UniffiConverterString.read(buf),
            encoded_unsigned_tx=_UniffiConverterString.read(buf),
            partial_signature_request_payload=_UniffiConverterTypePartialSignatureRequestPayload.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.msg)
        _UniffiConverterString.check_lower(value.output_pubkey)
        _UniffiConverterString.check_lower(value.client_partial_sig)
        _UniffiConverterString.check_lower(value.encoded_session)
        _UniffiConverterString.check_lower(value.encoded_unsigned_tx)
        _UniffiConverterTypePartialSignatureRequestPayload.check_lower(value.partial_signature_request_payload)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.msg, buf)
        _UniffiConverterString.write(value.output_pubkey, buf)
        _UniffiConverterString.write(value.client_partial_sig, buf)
        _UniffiConverterString.write(value.encoded_session, buf)
        _UniffiConverterString.write(value.encoded_unsigned_tx, buf)
        _UniffiConverterTypePartialSignatureRequestPayload.write(value.partial_signature_request_payload, buf)


class PartialSignatureRequestPayload:
    statechain_id: "str"
    negate_seckey: "int"
    session: "str"
    signed_statechain_id: "str"
    server_pub_nonce: "str"
    @typing.no_type_check
    def __init__(self, *, statechain_id: "str", negate_seckey: "int", session: "str", signed_statechain_id: "str", server_pub_nonce: "str"):
        self.statechain_id = statechain_id
        self.negate_seckey = negate_seckey
        self.session = session
        self.signed_statechain_id = signed_statechain_id
        self.server_pub_nonce = server_pub_nonce

    def __str__(self):
        return "PartialSignatureRequestPayload(statechain_id={}, negate_seckey={}, session={}, signed_statechain_id={}, server_pub_nonce={})".format(self.statechain_id, self.negate_seckey, self.session, self.signed_statechain_id, self.server_pub_nonce)

    def __eq__(self, other):
        if self.statechain_id != other.statechain_id:
            return False
        if self.negate_seckey != other.negate_seckey:
            return False
        if self.session != other.session:
            return False
        if self.signed_statechain_id != other.signed_statechain_id:
            return False
        if self.server_pub_nonce != other.server_pub_nonce:
            return False
        return True

class _UniffiConverterTypePartialSignatureRequestPayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PartialSignatureRequestPayload(
            statechain_id=_UniffiConverterString.read(buf),
            negate_seckey=_UniffiConverterUInt8.read(buf),
            session=_UniffiConverterString.read(buf),
            signed_statechain_id=_UniffiConverterString.read(buf),
            server_pub_nonce=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterUInt8.check_lower(value.negate_seckey)
        _UniffiConverterString.check_lower(value.session)
        _UniffiConverterString.check_lower(value.signed_statechain_id)
        _UniffiConverterString.check_lower(value.server_pub_nonce)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterUInt8.write(value.negate_seckey, buf)
        _UniffiConverterString.write(value.session, buf)
        _UniffiConverterString.write(value.signed_statechain_id, buf)
        _UniffiConverterString.write(value.server_pub_nonce, buf)


class PartialSignatureResponsePayload:
    partial_sig: "str"
    @typing.no_type_check
    def __init__(self, *, partial_sig: "str"):
        self.partial_sig = partial_sig

    def __str__(self):
        return "PartialSignatureResponsePayload(partial_sig={})".format(self.partial_sig)

    def __eq__(self, other):
        if self.partial_sig != other.partial_sig:
            return False
        return True

class _UniffiConverterTypePartialSignatureResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PartialSignatureResponsePayload(
            partial_sig=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.partial_sig)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.partial_sig, buf)


class PubKeyInfo:
    server_pubkey: "str"
    tx_n: "int"
    updated_at: "str"
    @typing.no_type_check
    def __init__(self, *, server_pubkey: "str", tx_n: "int", updated_at: "str"):
        self.server_pubkey = server_pubkey
        self.tx_n = tx_n
        self.updated_at = updated_at

    def __str__(self):
        return "PubKeyInfo(server_pubkey={}, tx_n={}, updated_at={})".format(self.server_pubkey, self.tx_n, self.updated_at)

    def __eq__(self, other):
        if self.server_pubkey != other.server_pubkey:
            return False
        if self.tx_n != other.tx_n:
            return False
        if self.updated_at != other.updated_at:
            return False
        return True

class _UniffiConverterTypePubKeyInfo(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PubKeyInfo(
            server_pubkey=_UniffiConverterString.read(buf),
            tx_n=_UniffiConverterUInt32.read(buf),
            updated_at=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.server_pubkey)
        _UniffiConverterUInt32.check_lower(value.tx_n)
        _UniffiConverterString.check_lower(value.updated_at)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.server_pubkey, buf)
        _UniffiConverterUInt32.write(value.tx_n, buf)
        _UniffiConverterString.write(value.updated_at, buf)


class ServerConfig:
    initlock: "int"
    interval: "int"
    @typing.no_type_check
    def __init__(self, *, initlock: "int", interval: "int"):
        self.initlock = initlock
        self.interval = interval

    def __str__(self):
        return "ServerConfig(initlock={}, interval={})".format(self.initlock, self.interval)

    def __eq__(self, other):
        if self.initlock != other.initlock:
            return False
        if self.interval != other.interval:
            return False
        return True

class _UniffiConverterTypeServerConfig(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ServerConfig(
            initlock=_UniffiConverterUInt32.read(buf),
            interval=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt32.check_lower(value.initlock)
        _UniffiConverterUInt32.check_lower(value.interval)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt32.write(value.initlock, buf)
        _UniffiConverterUInt32.write(value.interval, buf)


class ServerPublicNonceResponsePayload:
    server_pubnonce: "str"
    @typing.no_type_check
    def __init__(self, *, server_pubnonce: "str"):
        self.server_pubnonce = server_pubnonce

    def __str__(self):
        return "ServerPublicNonceResponsePayload(server_pubnonce={})".format(self.server_pubnonce)

    def __eq__(self, other):
        if self.server_pubnonce != other.server_pubnonce:
            return False
        return True

class _UniffiConverterTypeServerPublicNonceResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ServerPublicNonceResponsePayload(
            server_pubnonce=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.server_pubnonce)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.server_pubnonce, buf)


class Settings:
    network: "str"
    block_explorer_url: "typing.Optional[str]"
    tor_proxy_host: "typing.Optional[str]"
    tor_proxy_port: "typing.Optional[str]"
    tor_proxy_control_password: "typing.Optional[str]"
    tor_proxy_control_port: "typing.Optional[str]"
    statechain_entity_api: "str"
    tor_statechain_entity_api: "typing.Optional[str]"
    electrum_protocol: "str"
    electrum_host: "str"
    electrum_port: "str"
    electrum_type: "str"
    notifications: "bool"
    tutorials: "bool"
    @typing.no_type_check
    def __init__(self, *, network: "str", block_explorer_url: "typing.Optional[str]", tor_proxy_host: "typing.Optional[str]", tor_proxy_port: "typing.Optional[str]", tor_proxy_control_password: "typing.Optional[str]", tor_proxy_control_port: "typing.Optional[str]", statechain_entity_api: "str", tor_statechain_entity_api: "typing.Optional[str]", electrum_protocol: "str", electrum_host: "str", electrum_port: "str", electrum_type: "str", notifications: "bool", tutorials: "bool"):
        self.network = network
        self.block_explorer_url = block_explorer_url
        self.tor_proxy_host = tor_proxy_host
        self.tor_proxy_port = tor_proxy_port
        self.tor_proxy_control_password = tor_proxy_control_password
        self.tor_proxy_control_port = tor_proxy_control_port
        self.statechain_entity_api = statechain_entity_api
        self.tor_statechain_entity_api = tor_statechain_entity_api
        self.electrum_protocol = electrum_protocol
        self.electrum_host = electrum_host
        self.electrum_port = electrum_port
        self.electrum_type = electrum_type
        self.notifications = notifications
        self.tutorials = tutorials

    def __str__(self):
        return "Settings(network={}, block_explorer_url={}, tor_proxy_host={}, tor_proxy_port={}, tor_proxy_control_password={}, tor_proxy_control_port={}, statechain_entity_api={}, tor_statechain_entity_api={}, electrum_protocol={}, electrum_host={}, electrum_port={}, electrum_type={}, notifications={}, tutorials={})".format(self.network, self.block_explorer_url, self.tor_proxy_host, self.tor_proxy_port, self.tor_proxy_control_password, self.tor_proxy_control_port, self.statechain_entity_api, self.tor_statechain_entity_api, self.electrum_protocol, self.electrum_host, self.electrum_port, self.electrum_type, self.notifications, self.tutorials)

    def __eq__(self, other):
        if self.network != other.network:
            return False
        if self.block_explorer_url != other.block_explorer_url:
            return False
        if self.tor_proxy_host != other.tor_proxy_host:
            return False
        if self.tor_proxy_port != other.tor_proxy_port:
            return False
        if self.tor_proxy_control_password != other.tor_proxy_control_password:
            return False
        if self.tor_proxy_control_port != other.tor_proxy_control_port:
            return False
        if self.statechain_entity_api != other.statechain_entity_api:
            return False
        if self.tor_statechain_entity_api != other.tor_statechain_entity_api:
            return False
        if self.electrum_protocol != other.electrum_protocol:
            return False
        if self.electrum_host != other.electrum_host:
            return False
        if self.electrum_port != other.electrum_port:
            return False
        if self.electrum_type != other.electrum_type:
            return False
        if self.notifications != other.notifications:
            return False
        if self.tutorials != other.tutorials:
            return False
        return True

class _UniffiConverterTypeSettings(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Settings(
            network=_UniffiConverterString.read(buf),
            block_explorer_url=_UniffiConverterOptionalString.read(buf),
            tor_proxy_host=_UniffiConverterOptionalString.read(buf),
            tor_proxy_port=_UniffiConverterOptionalString.read(buf),
            tor_proxy_control_password=_UniffiConverterOptionalString.read(buf),
            tor_proxy_control_port=_UniffiConverterOptionalString.read(buf),
            statechain_entity_api=_UniffiConverterString.read(buf),
            tor_statechain_entity_api=_UniffiConverterOptionalString.read(buf),
            electrum_protocol=_UniffiConverterString.read(buf),
            electrum_host=_UniffiConverterString.read(buf),
            electrum_port=_UniffiConverterString.read(buf),
            electrum_type=_UniffiConverterString.read(buf),
            notifications=_UniffiConverterBool.read(buf),
            tutorials=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.network)
        _UniffiConverterOptionalString.check_lower(value.block_explorer_url)
        _UniffiConverterOptionalString.check_lower(value.tor_proxy_host)
        _UniffiConverterOptionalString.check_lower(value.tor_proxy_port)
        _UniffiConverterOptionalString.check_lower(value.tor_proxy_control_password)
        _UniffiConverterOptionalString.check_lower(value.tor_proxy_control_port)
        _UniffiConverterString.check_lower(value.statechain_entity_api)
        _UniffiConverterOptionalString.check_lower(value.tor_statechain_entity_api)
        _UniffiConverterString.check_lower(value.electrum_protocol)
        _UniffiConverterString.check_lower(value.electrum_host)
        _UniffiConverterString.check_lower(value.electrum_port)
        _UniffiConverterString.check_lower(value.electrum_type)
        _UniffiConverterBool.check_lower(value.notifications)
        _UniffiConverterBool.check_lower(value.tutorials)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.network, buf)
        _UniffiConverterOptionalString.write(value.block_explorer_url, buf)
        _UniffiConverterOptionalString.write(value.tor_proxy_host, buf)
        _UniffiConverterOptionalString.write(value.tor_proxy_port, buf)
        _UniffiConverterOptionalString.write(value.tor_proxy_control_password, buf)
        _UniffiConverterOptionalString.write(value.tor_proxy_control_port, buf)
        _UniffiConverterString.write(value.statechain_entity_api, buf)
        _UniffiConverterOptionalString.write(value.tor_statechain_entity_api, buf)
        _UniffiConverterString.write(value.electrum_protocol, buf)
        _UniffiConverterString.write(value.electrum_host, buf)
        _UniffiConverterString.write(value.electrum_port, buf)
        _UniffiConverterString.write(value.electrum_type, buf)
        _UniffiConverterBool.write(value.notifications, buf)
        _UniffiConverterBool.write(value.tutorials, buf)


class SignFirstRequestPayload:
    statechain_id: "str"
    signed_statechain_id: "str"
    @typing.no_type_check
    def __init__(self, *, statechain_id: "str", signed_statechain_id: "str"):
        self.statechain_id = statechain_id
        self.signed_statechain_id = signed_statechain_id

    def __str__(self):
        return "SignFirstRequestPayload(statechain_id={}, signed_statechain_id={})".format(self.statechain_id, self.signed_statechain_id)

    def __eq__(self, other):
        if self.statechain_id != other.statechain_id:
            return False
        if self.signed_statechain_id != other.signed_statechain_id:
            return False
        return True

class _UniffiConverterTypeSignFirstRequestPayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SignFirstRequestPayload(
            statechain_id=_UniffiConverterString.read(buf),
            signed_statechain_id=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterString.check_lower(value.signed_statechain_id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterString.write(value.signed_statechain_id, buf)


class SignFirstResponsePayload:
    server_pubnonce: "str"
    @typing.no_type_check
    def __init__(self, *, server_pubnonce: "str"):
        self.server_pubnonce = server_pubnonce

    def __str__(self):
        return "SignFirstResponsePayload(server_pubnonce={})".format(self.server_pubnonce)

    def __eq__(self, other):
        if self.server_pubnonce != other.server_pubnonce:
            return False
        return True

class _UniffiConverterTypeSignFirstResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SignFirstResponsePayload(
            server_pubnonce=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.server_pubnonce)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.server_pubnonce, buf)


class StatechainBackupTxs:
    statechain_id: "str"
    backup_txs: "typing.List[BackupTx]"
    @typing.no_type_check
    def __init__(self, *, statechain_id: "str", backup_txs: "typing.List[BackupTx]"):
        self.statechain_id = statechain_id
        self.backup_txs = backup_txs

    def __str__(self):
        return "StatechainBackupTxs(statechain_id={}, backup_txs={})".format(self.statechain_id, self.backup_txs)

    def __eq__(self, other):
        if self.statechain_id != other.statechain_id:
            return False
        if self.backup_txs != other.backup_txs:
            return False
        return True

class _UniffiConverterTypeStatechainBackupTxs(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return StatechainBackupTxs(
            statechain_id=_UniffiConverterString.read(buf),
            backup_txs=_UniffiConverterSequenceTypeBackupTx.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterSequenceTypeBackupTx.check_lower(value.backup_txs)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterSequenceTypeBackupTx.write(value.backup_txs, buf)


class StatechainInfo:
    statechain_id: "str"
    server_pubnonce: "str"
    challenge: "str"
    tx_n: "int"
    @typing.no_type_check
    def __init__(self, *, statechain_id: "str", server_pubnonce: "str", challenge: "str", tx_n: "int"):
        self.statechain_id = statechain_id
        self.server_pubnonce = server_pubnonce
        self.challenge = challenge
        self.tx_n = tx_n

    def __str__(self):
        return "StatechainInfo(statechain_id={}, server_pubnonce={}, challenge={}, tx_n={})".format(self.statechain_id, self.server_pubnonce, self.challenge, self.tx_n)

    def __eq__(self, other):
        if self.statechain_id != other.statechain_id:
            return False
        if self.server_pubnonce != other.server_pubnonce:
            return False
        if self.challenge != other.challenge:
            return False
        if self.tx_n != other.tx_n:
            return False
        return True

class _UniffiConverterTypeStatechainInfo(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return StatechainInfo(
            statechain_id=_UniffiConverterString.read(buf),
            server_pubnonce=_UniffiConverterString.read(buf),
            challenge=_UniffiConverterString.read(buf),
            tx_n=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterString.check_lower(value.server_pubnonce)
        _UniffiConverterString.check_lower(value.challenge)
        _UniffiConverterUInt32.check_lower(value.tx_n)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterString.write(value.server_pubnonce, buf)
        _UniffiConverterString.write(value.challenge, buf)
        _UniffiConverterUInt32.write(value.tx_n, buf)


class StatechainInfoResponsePayload:
    enclave_public_key: "str"
    num_sigs: "int"
    statechain_info: "typing.List[StatechainInfo]"
    x1_pub: "str"
    @typing.no_type_check
    def __init__(self, *, enclave_public_key: "str", num_sigs: "int", statechain_info: "typing.List[StatechainInfo]", x1_pub: "str"):
        self.enclave_public_key = enclave_public_key
        self.num_sigs = num_sigs
        self.statechain_info = statechain_info
        self.x1_pub = x1_pub

    def __str__(self):
        return "StatechainInfoResponsePayload(enclave_public_key={}, num_sigs={}, statechain_info={}, x1_pub={})".format(self.enclave_public_key, self.num_sigs, self.statechain_info, self.x1_pub)

    def __eq__(self, other):
        if self.enclave_public_key != other.enclave_public_key:
            return False
        if self.num_sigs != other.num_sigs:
            return False
        if self.statechain_info != other.statechain_info:
            return False
        if self.x1_pub != other.x1_pub:
            return False
        return True

class _UniffiConverterTypeStatechainInfoResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return StatechainInfoResponsePayload(
            enclave_public_key=_UniffiConverterString.read(buf),
            num_sigs=_UniffiConverterUInt32.read(buf),
            statechain_info=_UniffiConverterSequenceTypeStatechainInfo.read(buf),
            x1_pub=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.enclave_public_key)
        _UniffiConverterUInt32.check_lower(value.num_sigs)
        _UniffiConverterSequenceTypeStatechainInfo.check_lower(value.statechain_info)
        _UniffiConverterString.check_lower(value.x1_pub)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.enclave_public_key, buf)
        _UniffiConverterUInt32.write(value.num_sigs, buf)
        _UniffiConverterSequenceTypeStatechainInfo.write(value.statechain_info, buf)
        _UniffiConverterString.write(value.x1_pub, buf)


class Token:
    btc_payment_address: "str"
    fee: "str"
    lightning_invoice: "str"
    processor_id: "str"
    token_id: "str"
    confirmed: "bool"
    spent: "bool"
    expiry: "str"
    @typing.no_type_check
    def __init__(self, *, btc_payment_address: "str", fee: "str", lightning_invoice: "str", processor_id: "str", token_id: "str", confirmed: "bool", spent: "bool", expiry: "str"):
        self.btc_payment_address = btc_payment_address
        self.fee = fee
        self.lightning_invoice = lightning_invoice
        self.processor_id = processor_id
        self.token_id = token_id
        self.confirmed = confirmed
        self.spent = spent
        self.expiry = expiry

    def __str__(self):
        return "Token(btc_payment_address={}, fee={}, lightning_invoice={}, processor_id={}, token_id={}, confirmed={}, spent={}, expiry={})".format(self.btc_payment_address, self.fee, self.lightning_invoice, self.processor_id, self.token_id, self.confirmed, self.spent, self.expiry)

    def __eq__(self, other):
        if self.btc_payment_address != other.btc_payment_address:
            return False
        if self.fee != other.fee:
            return False
        if self.lightning_invoice != other.lightning_invoice:
            return False
        if self.processor_id != other.processor_id:
            return False
        if self.token_id != other.token_id:
            return False
        if self.confirmed != other.confirmed:
            return False
        if self.spent != other.spent:
            return False
        if self.expiry != other.expiry:
            return False
        return True

class _UniffiConverterTypeToken(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Token(
            btc_payment_address=_UniffiConverterString.read(buf),
            fee=_UniffiConverterString.read(buf),
            lightning_invoice=_UniffiConverterString.read(buf),
            processor_id=_UniffiConverterString.read(buf),
            token_id=_UniffiConverterString.read(buf),
            confirmed=_UniffiConverterBool.read(buf),
            spent=_UniffiConverterBool.read(buf),
            expiry=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.btc_payment_address)
        _UniffiConverterString.check_lower(value.fee)
        _UniffiConverterString.check_lower(value.lightning_invoice)
        _UniffiConverterString.check_lower(value.processor_id)
        _UniffiConverterString.check_lower(value.token_id)
        _UniffiConverterBool.check_lower(value.confirmed)
        _UniffiConverterBool.check_lower(value.spent)
        _UniffiConverterString.check_lower(value.expiry)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.btc_payment_address, buf)
        _UniffiConverterString.write(value.fee, buf)
        _UniffiConverterString.write(value.lightning_invoice, buf)
        _UniffiConverterString.write(value.processor_id, buf)
        _UniffiConverterString.write(value.token_id, buf)
        _UniffiConverterBool.write(value.confirmed, buf)
        _UniffiConverterBool.write(value.spent, buf)
        _UniffiConverterString.write(value.expiry, buf)


class TransferReceiverGetResponsePayload:
    transfer_complete: "bool"
    @typing.no_type_check
    def __init__(self, *, transfer_complete: "bool"):
        self.transfer_complete = transfer_complete

    def __str__(self):
        return "TransferReceiverGetResponsePayload(transfer_complete={})".format(self.transfer_complete)

    def __eq__(self, other):
        if self.transfer_complete != other.transfer_complete:
            return False
        return True

class _UniffiConverterTypeTransferReceiverGetResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TransferReceiverGetResponsePayload(
            transfer_complete=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterBool.check_lower(value.transfer_complete)

    @staticmethod
    def write(value, buf):
        _UniffiConverterBool.write(value.transfer_complete, buf)


class TransferReceiverRequestPayload:
    statechain_id: "str"
    batch_data: "typing.Optional[str]"
    t2: "str"
    auth_sig: "str"
    @typing.no_type_check
    def __init__(self, *, statechain_id: "str", batch_data: "typing.Optional[str]", t2: "str", auth_sig: "str"):
        self.statechain_id = statechain_id
        self.batch_data = batch_data
        self.t2 = t2
        self.auth_sig = auth_sig

    def __str__(self):
        return "TransferReceiverRequestPayload(statechain_id={}, batch_data={}, t2={}, auth_sig={})".format(self.statechain_id, self.batch_data, self.t2, self.auth_sig)

    def __eq__(self, other):
        if self.statechain_id != other.statechain_id:
            return False
        if self.batch_data != other.batch_data:
            return False
        if self.t2 != other.t2:
            return False
        if self.auth_sig != other.auth_sig:
            return False
        return True

class _UniffiConverterTypeTransferReceiverRequestPayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TransferReceiverRequestPayload(
            statechain_id=_UniffiConverterString.read(buf),
            batch_data=_UniffiConverterOptionalString.read(buf),
            t2=_UniffiConverterString.read(buf),
            auth_sig=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterOptionalString.check_lower(value.batch_data)
        _UniffiConverterString.check_lower(value.t2)
        _UniffiConverterString.check_lower(value.auth_sig)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterOptionalString.write(value.batch_data, buf)
        _UniffiConverterString.write(value.t2, buf)
        _UniffiConverterString.write(value.auth_sig, buf)


class TransferReceiverResponsePayload:
    server_pubkey: "str"
    @typing.no_type_check
    def __init__(self, *, server_pubkey: "str"):
        self.server_pubkey = server_pubkey

    def __str__(self):
        return "TransferReceiverResponsePayload(server_pubkey={})".format(self.server_pubkey)

    def __eq__(self, other):
        if self.server_pubkey != other.server_pubkey:
            return False
        return True

class _UniffiConverterTypeTransferReceiverResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TransferReceiverResponsePayload(
            server_pubkey=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.server_pubkey)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.server_pubkey, buf)


class TransferSenderRequestPayload:
    statechain_id: "str"
    auth_sig: "str"
    new_user_auth_key: "str"
    batch_id: "typing.Optional[str]"
    @typing.no_type_check
    def __init__(self, *, statechain_id: "str", auth_sig: "str", new_user_auth_key: "str", batch_id: "typing.Optional[str]"):
        self.statechain_id = statechain_id
        self.auth_sig = auth_sig
        self.new_user_auth_key = new_user_auth_key
        self.batch_id = batch_id

    def __str__(self):
        return "TransferSenderRequestPayload(statechain_id={}, auth_sig={}, new_user_auth_key={}, batch_id={})".format(self.statechain_id, self.auth_sig, self.new_user_auth_key, self.batch_id)

    def __eq__(self, other):
        if self.statechain_id != other.statechain_id:
            return False
        if self.auth_sig != other.auth_sig:
            return False
        if self.new_user_auth_key != other.new_user_auth_key:
            return False
        if self.batch_id != other.batch_id:
            return False
        return True

class _UniffiConverterTypeTransferSenderRequestPayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TransferSenderRequestPayload(
            statechain_id=_UniffiConverterString.read(buf),
            auth_sig=_UniffiConverterString.read(buf),
            new_user_auth_key=_UniffiConverterString.read(buf),
            batch_id=_UniffiConverterOptionalString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterString.check_lower(value.auth_sig)
        _UniffiConverterString.check_lower(value.new_user_auth_key)
        _UniffiConverterOptionalString.check_lower(value.batch_id)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterString.write(value.auth_sig, buf)
        _UniffiConverterString.write(value.new_user_auth_key, buf)
        _UniffiConverterOptionalString.write(value.batch_id, buf)


class TransferSenderResponsePayload:
    x1: "str"
    @typing.no_type_check
    def __init__(self, *, x1: "str"):
        self.x1 = x1

    def __str__(self):
        return "TransferSenderResponsePayload(x1={})".format(self.x1)

    def __eq__(self, other):
        if self.x1 != other.x1:
            return False
        return True

class _UniffiConverterTypeTransferSenderResponsePayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TransferSenderResponsePayload(
            x1=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.x1)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.x1, buf)


class TransferUpdateMsgRequestPayload:
    statechain_id: "str"
    auth_sig: "str"
    new_user_auth_key: "str"
    enc_transfer_msg: "str"
    @typing.no_type_check
    def __init__(self, *, statechain_id: "str", auth_sig: "str", new_user_auth_key: "str", enc_transfer_msg: "str"):
        self.statechain_id = statechain_id
        self.auth_sig = auth_sig
        self.new_user_auth_key = new_user_auth_key
        self.enc_transfer_msg = enc_transfer_msg

    def __str__(self):
        return "TransferUpdateMsgRequestPayload(statechain_id={}, auth_sig={}, new_user_auth_key={}, enc_transfer_msg={})".format(self.statechain_id, self.auth_sig, self.new_user_auth_key, self.enc_transfer_msg)

    def __eq__(self, other):
        if self.statechain_id != other.statechain_id:
            return False
        if self.auth_sig != other.auth_sig:
            return False
        if self.new_user_auth_key != other.new_user_auth_key:
            return False
        if self.enc_transfer_msg != other.enc_transfer_msg:
            return False
        return True

class _UniffiConverterTypeTransferUpdateMsgRequestPayload(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TransferUpdateMsgRequestPayload(
            statechain_id=_UniffiConverterString.read(buf),
            auth_sig=_UniffiConverterString.read(buf),
            new_user_auth_key=_UniffiConverterString.read(buf),
            enc_transfer_msg=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.statechain_id)
        _UniffiConverterString.check_lower(value.auth_sig)
        _UniffiConverterString.check_lower(value.new_user_auth_key)
        _UniffiConverterString.check_lower(value.enc_transfer_msg)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.statechain_id, buf)
        _UniffiConverterString.write(value.auth_sig, buf)
        _UniffiConverterString.write(value.new_user_auth_key, buf)
        _UniffiConverterString.write(value.enc_transfer_msg, buf)


class TxOutpoint:
    txid: "str"
    vout: "int"
    @typing.no_type_check
    def __init__(self, *, txid: "str", vout: "int"):
        self.txid = txid
        self.vout = vout

    def __str__(self):
        return "TxOutpoint(txid={}, vout={})".format(self.txid, self.vout)

    def __eq__(self, other):
        if self.txid != other.txid:
            return False
        if self.vout != other.vout:
            return False
        return True

class _UniffiConverterTypeTxOutpoint(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TxOutpoint(
            txid=_UniffiConverterString.read(buf),
            vout=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.txid)
        _UniffiConverterUInt32.check_lower(value.vout)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.txid, buf)
        _UniffiConverterUInt32.write(value.vout, buf)


class Wallet:
    name: "str"
    mnemonic: "str"
    version: "str"
    state_entity_endpoint: "str"
    electrum_endpoint: "str"
    network: "str"
    blockheight: "int"
    initlock: "int"
    interval: "int"
    tokens: "typing.List[Token]"
    activities: "typing.List[Activity]"
    coins: "typing.List[Coin]"
    settings: "Settings"
    @typing.no_type_check
    def __init__(self, *, name: "str", mnemonic: "str", version: "str", state_entity_endpoint: "str", electrum_endpoint: "str", network: "str", blockheight: "int", initlock: "int", interval: "int", tokens: "typing.List[Token]", activities: "typing.List[Activity]", coins: "typing.List[Coin]", settings: "Settings"):
        self.name = name
        self.mnemonic = mnemonic
        self.version = version
        self.state_entity_endpoint = state_entity_endpoint
        self.electrum_endpoint = electrum_endpoint
        self.network = network
        self.blockheight = blockheight
        self.initlock = initlock
        self.interval = interval
        self.tokens = tokens
        self.activities = activities
        self.coins = coins
        self.settings = settings

    def __str__(self):
        return "Wallet(name={}, mnemonic={}, version={}, state_entity_endpoint={}, electrum_endpoint={}, network={}, blockheight={}, initlock={}, interval={}, tokens={}, activities={}, coins={}, settings={})".format(self.name, self.mnemonic, self.version, self.state_entity_endpoint, self.electrum_endpoint, self.network, self.blockheight, self.initlock, self.interval, self.tokens, self.activities, self.coins, self.settings)

    def __eq__(self, other):
        if self.name != other.name:
            return False
        if self.mnemonic != other.mnemonic:
            return False
        if self.version != other.version:
            return False
        if self.state_entity_endpoint != other.state_entity_endpoint:
            return False
        if self.electrum_endpoint != other.electrum_endpoint:
            return False
        if self.network != other.network:
            return False
        if self.blockheight != other.blockheight:
            return False
        if self.initlock != other.initlock:
            return False
        if self.interval != other.interval:
            return False
        if self.tokens != other.tokens:
            return False
        if self.activities != other.activities:
            return False
        if self.coins != other.coins:
            return False
        if self.settings != other.settings:
            return False
        return True

class _UniffiConverterTypeWallet(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Wallet(
            name=_UniffiConverterString.read(buf),
            mnemonic=_UniffiConverterString.read(buf),
            version=_UniffiConverterString.read(buf),
            state_entity_endpoint=_UniffiConverterString.read(buf),
            electrum_endpoint=_UniffiConverterString.read(buf),
            network=_UniffiConverterString.read(buf),
            blockheight=_UniffiConverterUInt32.read(buf),
            initlock=_UniffiConverterUInt32.read(buf),
            interval=_UniffiConverterUInt32.read(buf),
            tokens=_UniffiConverterSequenceTypeToken.read(buf),
            activities=_UniffiConverterSequenceTypeActivity.read(buf),
            coins=_UniffiConverterSequenceTypeCoin.read(buf),
            settings=_UniffiConverterTypeSettings.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.name)
        _UniffiConverterString.check_lower(value.mnemonic)
        _UniffiConverterString.check_lower(value.version)
        _UniffiConverterString.check_lower(value.state_entity_endpoint)
        _UniffiConverterString.check_lower(value.electrum_endpoint)
        _UniffiConverterString.check_lower(value.network)
        _UniffiConverterUInt32.check_lower(value.blockheight)
        _UniffiConverterUInt32.check_lower(value.initlock)
        _UniffiConverterUInt32.check_lower(value.interval)
        _UniffiConverterSequenceTypeToken.check_lower(value.tokens)
        _UniffiConverterSequenceTypeActivity.check_lower(value.activities)
        _UniffiConverterSequenceTypeCoin.check_lower(value.coins)
        _UniffiConverterTypeSettings.check_lower(value.settings)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterString.write(value.mnemonic, buf)
        _UniffiConverterString.write(value.version, buf)
        _UniffiConverterString.write(value.state_entity_endpoint, buf)
        _UniffiConverterString.write(value.electrum_endpoint, buf)
        _UniffiConverterString.write(value.network, buf)
        _UniffiConverterUInt32.write(value.blockheight, buf)
        _UniffiConverterUInt32.write(value.initlock, buf)
        _UniffiConverterUInt32.write(value.interval, buf)
        _UniffiConverterSequenceTypeToken.write(value.tokens, buf)
        _UniffiConverterSequenceTypeActivity.write(value.activities, buf)
        _UniffiConverterSequenceTypeCoin.write(value.coins, buf)
        _UniffiConverterTypeSettings.write(value.settings, buf)





class CoinStatus(enum.Enum):
    INITIALISED = 0
    
    IN_MEMPOOL = 1
    
    UNCONFIRMED = 2
    
    CONFIRMED = 3
    
    IN_TRANSFER = 4
    
    WITHDRAWING = 5
    
    TRANSFERRED = 6
    
    WITHDRAWN = 7
    


class _UniffiConverterTypeCoinStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return CoinStatus.INITIALISED
        if variant == 2:
            return CoinStatus.IN_MEMPOOL
        if variant == 3:
            return CoinStatus.UNCONFIRMED
        if variant == 4:
            return CoinStatus.CONFIRMED
        if variant == 5:
            return CoinStatus.IN_TRANSFER
        if variant == 6:
            return CoinStatus.WITHDRAWING
        if variant == 7:
            return CoinStatus.TRANSFERRED
        if variant == 8:
            return CoinStatus.WITHDRAWN
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == CoinStatus.INITIALISED:
            return
        if value == CoinStatus.IN_MEMPOOL:
            return
        if value == CoinStatus.UNCONFIRMED:
            return
        if value == CoinStatus.CONFIRMED:
            return
        if value == CoinStatus.IN_TRANSFER:
            return
        if value == CoinStatus.WITHDRAWING:
            return
        if value == CoinStatus.TRANSFERRED:
            return
        if value == CoinStatus.WITHDRAWN:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == CoinStatus.INITIALISED:
            buf.write_i32(1)
        if value == CoinStatus.IN_MEMPOOL:
            buf.write_i32(2)
        if value == CoinStatus.UNCONFIRMED:
            buf.write_i32(3)
        if value == CoinStatus.CONFIRMED:
            buf.write_i32(4)
        if value == CoinStatus.IN_TRANSFER:
            buf.write_i32(5)
        if value == CoinStatus.WITHDRAWING:
            buf.write_i32(6)
        if value == CoinStatus.TRANSFERRED:
            buf.write_i32(7)
        if value == CoinStatus.WITHDRAWN:
            buf.write_i32(8)




# MercuryError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class MercuryError(Exception):
    pass

_UniffiTempMercuryError = MercuryError

class MercuryError:  # type: ignore
    class Bip39Error(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.Bip39Error({})".format(str(self))
    _UniffiTempMercuryError.Bip39Error = Bip39Error # type: ignore
    class Bip32Error(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.Bip32Error({})".format(str(self))
    _UniffiTempMercuryError.Bip32Error = Bip32Error # type: ignore
    class NetworkConversionError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.NetworkConversionError({})".format(str(self))
    _UniffiTempMercuryError.NetworkConversionError = NetworkConversionError # type: ignore
    class Secp256k1UpstreamError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.Secp256k1UpstreamError({})".format(str(self))
    _UniffiTempMercuryError.Secp256k1UpstreamError = Secp256k1UpstreamError # type: ignore
    class KeyError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.KeyError({})".format(str(self))
    _UniffiTempMercuryError.KeyError = KeyError # type: ignore
    class Bech32Error(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.Bech32Error({})".format(str(self))
    _UniffiTempMercuryError.Bech32Error = Bech32Error # type: ignore
    class HexError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.HexError({})".format(str(self))
    _UniffiTempMercuryError.HexError = HexError # type: ignore
    class LocktimeNotBlockHeightError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.LocktimeNotBlockHeightError({})".format(str(self))
    _UniffiTempMercuryError.LocktimeNotBlockHeightError = LocktimeNotBlockHeightError # type: ignore
    class BitcoinConsensusEncodeError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.BitcoinConsensusEncodeError({})".format(str(self))
    _UniffiTempMercuryError.BitcoinConsensusEncodeError = BitcoinConsensusEncodeError # type: ignore
    class MusigNonceGenError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.MusigNonceGenError({})".format(str(self))
    _UniffiTempMercuryError.MusigNonceGenError = MusigNonceGenError # type: ignore
    class InvalidStatechainAddressError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.InvalidStatechainAddressError({})".format(str(self))
    _UniffiTempMercuryError.InvalidStatechainAddressError = InvalidStatechainAddressError # type: ignore
    class InvalidBitcoinAddressError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.InvalidBitcoinAddressError({})".format(str(self))
    _UniffiTempMercuryError.InvalidBitcoinAddressError = InvalidBitcoinAddressError # type: ignore
    class StatechainAddressMismatchNetworkError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.StatechainAddressMismatchNetworkError({})".format(str(self))
    _UniffiTempMercuryError.StatechainAddressMismatchNetworkError = StatechainAddressMismatchNetworkError # type: ignore
    class BitcoinAddressMismatchNetworkError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.BitcoinAddressMismatchNetworkError({})".format(str(self))
    _UniffiTempMercuryError.BitcoinAddressMismatchNetworkError = BitcoinAddressMismatchNetworkError # type: ignore
    class BitcoinAddressError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.BitcoinAddressError({})".format(str(self))
    _UniffiTempMercuryError.BitcoinAddressError = BitcoinAddressError # type: ignore
    class BitcoinAbsoluteError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.BitcoinAbsoluteError({})".format(str(self))
    _UniffiTempMercuryError.BitcoinAbsoluteError = BitcoinAbsoluteError # type: ignore
    class BitcoinHashHexError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.BitcoinHashHexError({})".format(str(self))
    _UniffiTempMercuryError.BitcoinHashHexError = BitcoinHashHexError # type: ignore
    class BitcoinPsbtError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.BitcoinPsbtError({})".format(str(self))
    _UniffiTempMercuryError.BitcoinPsbtError = BitcoinPsbtError # type: ignore
    class SighashTypeParseError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.SighashTypeParseError({})".format(str(self))
    _UniffiTempMercuryError.SighashTypeParseError = SighashTypeParseError # type: ignore
    class BitcoinSighashError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.BitcoinSighashError({})".format(str(self))
    _UniffiTempMercuryError.BitcoinSighashError = BitcoinSighashError # type: ignore
    class ParseError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.ParseError({})".format(str(self))
    _UniffiTempMercuryError.ParseError = ParseError # type: ignore
    class MusigSignError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.MusigSignError({})".format(str(self))
    _UniffiTempMercuryError.MusigSignError = MusigSignError # type: ignore
    class SchnorrSignatureValidationError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.SchnorrSignatureValidationError({})".format(str(self))
    _UniffiTempMercuryError.SchnorrSignatureValidationError = SchnorrSignatureValidationError # type: ignore
    class MoreThanOneInputError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.MoreThanOneInputError({})".format(str(self))
    _UniffiTempMercuryError.MoreThanOneInputError = MoreThanOneInputError # type: ignore
    class UnkownNetwork(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.UnkownNetwork({})".format(str(self))
    _UniffiTempMercuryError.UnkownNetwork = UnkownNetwork # type: ignore
    class BackupTransactionDoesNotPayUser(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.BackupTransactionDoesNotPayUser({})".format(str(self))
    _UniffiTempMercuryError.BackupTransactionDoesNotPayUser = BackupTransactionDoesNotPayUser # type: ignore
    class FeeTooHigh(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.FeeTooHigh({})".format(str(self))
    _UniffiTempMercuryError.FeeTooHigh = FeeTooHigh # type: ignore
    class FeeTooLow(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.FeeTooLow({})".format(str(self))
    _UniffiTempMercuryError.FeeTooLow = FeeTooLow # type: ignore
    class OutOfRangeError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.OutOfRangeError({})".format(str(self))
    _UniffiTempMercuryError.OutOfRangeError = OutOfRangeError # type: ignore
    class SerdeJsonError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.SerdeJsonError({})".format(str(self))
    _UniffiTempMercuryError.SerdeJsonError = SerdeJsonError # type: ignore
    class SecpError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.SecpError({})".format(str(self))
    _UniffiTempMercuryError.SecpError = SecpError # type: ignore
    class NoBackupTransactionFound(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.NoBackupTransactionFound({})".format(str(self))
    _UniffiTempMercuryError.NoBackupTransactionFound = NoBackupTransactionFound # type: ignore
    class Tx1HasMoreThanOneInput(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.Tx1HasMoreThanOneInput({})".format(str(self))
    _UniffiTempMercuryError.Tx1HasMoreThanOneInput = Tx1HasMoreThanOneInput # type: ignore
    class InvalidSignature(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.InvalidSignature({})".format(str(self))
    _UniffiTempMercuryError.InvalidSignature = InvalidSignature # type: ignore
    class EmptyWitness(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.EmptyWitness({})".format(str(self))
    _UniffiTempMercuryError.EmptyWitness = EmptyWitness # type: ignore
    class EmptyWitnessData(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.EmptyWitnessData({})".format(str(self))
    _UniffiTempMercuryError.EmptyWitnessData = EmptyWitnessData # type: ignore
    class IncorrectChallenge(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.IncorrectChallenge({})".format(str(self))
    _UniffiTempMercuryError.IncorrectChallenge = IncorrectChallenge # type: ignore
    class InvalidT1(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.InvalidT1({})".format(str(self))
    _UniffiTempMercuryError.InvalidT1 = InvalidT1 # type: ignore
    class IncorrectAggregatedPublicKey(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.IncorrectAggregatedPublicKey({})".format(str(self))
    _UniffiTempMercuryError.IncorrectAggregatedPublicKey = IncorrectAggregatedPublicKey # type: ignore
    class T1MustBeExactly32BytesError(_UniffiTempMercuryError):

        def __init__(self):
            pass
        def __repr__(self):
            return "MercuryError.T1MustBeExactly32BytesError({})".format(str(self))
    _UniffiTempMercuryError.T1MustBeExactly32BytesError = T1MustBeExactly32BytesError # type: ignore

MercuryError = _UniffiTempMercuryError # type: ignore
del _UniffiTempMercuryError


class _UniffiConverterTypeMercuryError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return MercuryError.Bip39Error(
            )
        if variant == 2:
            return MercuryError.Bip32Error(
            )
        if variant == 3:
            return MercuryError.NetworkConversionError(
            )
        if variant == 4:
            return MercuryError.Secp256k1UpstreamError(
            )
        if variant == 5:
            return MercuryError.KeyError(
            )
        if variant == 6:
            return MercuryError.Bech32Error(
            )
        if variant == 7:
            return MercuryError.HexError(
            )
        if variant == 8:
            return MercuryError.LocktimeNotBlockHeightError(
            )
        if variant == 9:
            return MercuryError.BitcoinConsensusEncodeError(
            )
        if variant == 10:
            return MercuryError.MusigNonceGenError(
            )
        if variant == 11:
            return MercuryError.InvalidStatechainAddressError(
            )
        if variant == 12:
            return MercuryError.InvalidBitcoinAddressError(
            )
        if variant == 13:
            return MercuryError.StatechainAddressMismatchNetworkError(
            )
        if variant == 14:
            return MercuryError.BitcoinAddressMismatchNetworkError(
            )
        if variant == 15:
            return MercuryError.BitcoinAddressError(
            )
        if variant == 16:
            return MercuryError.BitcoinAbsoluteError(
            )
        if variant == 17:
            return MercuryError.BitcoinHashHexError(
            )
        if variant == 18:
            return MercuryError.BitcoinPsbtError(
            )
        if variant == 19:
            return MercuryError.SighashTypeParseError(
            )
        if variant == 20:
            return MercuryError.BitcoinSighashError(
            )
        if variant == 21:
            return MercuryError.ParseError(
            )
        if variant == 22:
            return MercuryError.MusigSignError(
            )
        if variant == 23:
            return MercuryError.SchnorrSignatureValidationError(
            )
        if variant == 24:
            return MercuryError.MoreThanOneInputError(
            )
        if variant == 25:
            return MercuryError.UnkownNetwork(
            )
        if variant == 26:
            return MercuryError.BackupTransactionDoesNotPayUser(
            )
        if variant == 27:
            return MercuryError.FeeTooHigh(
            )
        if variant == 28:
            return MercuryError.FeeTooLow(
            )
        if variant == 29:
            return MercuryError.OutOfRangeError(
            )
        if variant == 30:
            return MercuryError.SerdeJsonError(
            )
        if variant == 31:
            return MercuryError.SecpError(
            )
        if variant == 32:
            return MercuryError.NoBackupTransactionFound(
            )
        if variant == 33:
            return MercuryError.Tx1HasMoreThanOneInput(
            )
        if variant == 34:
            return MercuryError.InvalidSignature(
            )
        if variant == 35:
            return MercuryError.EmptyWitness(
            )
        if variant == 36:
            return MercuryError.EmptyWitnessData(
            )
        if variant == 37:
            return MercuryError.IncorrectChallenge(
            )
        if variant == 38:
            return MercuryError.InvalidT1(
            )
        if variant == 39:
            return MercuryError.IncorrectAggregatedPublicKey(
            )
        if variant == 40:
            return MercuryError.T1MustBeExactly32BytesError(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, MercuryError.Bip39Error):
            return
        if isinstance(value, MercuryError.Bip32Error):
            return
        if isinstance(value, MercuryError.NetworkConversionError):
            return
        if isinstance(value, MercuryError.Secp256k1UpstreamError):
            return
        if isinstance(value, MercuryError.KeyError):
            return
        if isinstance(value, MercuryError.Bech32Error):
            return
        if isinstance(value, MercuryError.HexError):
            return
        if isinstance(value, MercuryError.LocktimeNotBlockHeightError):
            return
        if isinstance(value, MercuryError.BitcoinConsensusEncodeError):
            return
        if isinstance(value, MercuryError.MusigNonceGenError):
            return
        if isinstance(value, MercuryError.InvalidStatechainAddressError):
            return
        if isinstance(value, MercuryError.InvalidBitcoinAddressError):
            return
        if isinstance(value, MercuryError.StatechainAddressMismatchNetworkError):
            return
        if isinstance(value, MercuryError.BitcoinAddressMismatchNetworkError):
            return
        if isinstance(value, MercuryError.BitcoinAddressError):
            return
        if isinstance(value, MercuryError.BitcoinAbsoluteError):
            return
        if isinstance(value, MercuryError.BitcoinHashHexError):
            return
        if isinstance(value, MercuryError.BitcoinPsbtError):
            return
        if isinstance(value, MercuryError.SighashTypeParseError):
            return
        if isinstance(value, MercuryError.BitcoinSighashError):
            return
        if isinstance(value, MercuryError.ParseError):
            return
        if isinstance(value, MercuryError.MusigSignError):
            return
        if isinstance(value, MercuryError.SchnorrSignatureValidationError):
            return
        if isinstance(value, MercuryError.MoreThanOneInputError):
            return
        if isinstance(value, MercuryError.UnkownNetwork):
            return
        if isinstance(value, MercuryError.BackupTransactionDoesNotPayUser):
            return
        if isinstance(value, MercuryError.FeeTooHigh):
            return
        if isinstance(value, MercuryError.FeeTooLow):
            return
        if isinstance(value, MercuryError.OutOfRangeError):
            return
        if isinstance(value, MercuryError.SerdeJsonError):
            return
        if isinstance(value, MercuryError.SecpError):
            return
        if isinstance(value, MercuryError.NoBackupTransactionFound):
            return
        if isinstance(value, MercuryError.Tx1HasMoreThanOneInput):
            return
        if isinstance(value, MercuryError.InvalidSignature):
            return
        if isinstance(value, MercuryError.EmptyWitness):
            return
        if isinstance(value, MercuryError.EmptyWitnessData):
            return
        if isinstance(value, MercuryError.IncorrectChallenge):
            return
        if isinstance(value, MercuryError.InvalidT1):
            return
        if isinstance(value, MercuryError.IncorrectAggregatedPublicKey):
            return
        if isinstance(value, MercuryError.T1MustBeExactly32BytesError):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, MercuryError.Bip39Error):
            buf.write_i32(1)
        if isinstance(value, MercuryError.Bip32Error):
            buf.write_i32(2)
        if isinstance(value, MercuryError.NetworkConversionError):
            buf.write_i32(3)
        if isinstance(value, MercuryError.Secp256k1UpstreamError):
            buf.write_i32(4)
        if isinstance(value, MercuryError.KeyError):
            buf.write_i32(5)
        if isinstance(value, MercuryError.Bech32Error):
            buf.write_i32(6)
        if isinstance(value, MercuryError.HexError):
            buf.write_i32(7)
        if isinstance(value, MercuryError.LocktimeNotBlockHeightError):
            buf.write_i32(8)
        if isinstance(value, MercuryError.BitcoinConsensusEncodeError):
            buf.write_i32(9)
        if isinstance(value, MercuryError.MusigNonceGenError):
            buf.write_i32(10)
        if isinstance(value, MercuryError.InvalidStatechainAddressError):
            buf.write_i32(11)
        if isinstance(value, MercuryError.InvalidBitcoinAddressError):
            buf.write_i32(12)
        if isinstance(value, MercuryError.StatechainAddressMismatchNetworkError):
            buf.write_i32(13)
        if isinstance(value, MercuryError.BitcoinAddressMismatchNetworkError):
            buf.write_i32(14)
        if isinstance(value, MercuryError.BitcoinAddressError):
            buf.write_i32(15)
        if isinstance(value, MercuryError.BitcoinAbsoluteError):
            buf.write_i32(16)
        if isinstance(value, MercuryError.BitcoinHashHexError):
            buf.write_i32(17)
        if isinstance(value, MercuryError.BitcoinPsbtError):
            buf.write_i32(18)
        if isinstance(value, MercuryError.SighashTypeParseError):
            buf.write_i32(19)
        if isinstance(value, MercuryError.BitcoinSighashError):
            buf.write_i32(20)
        if isinstance(value, MercuryError.ParseError):
            buf.write_i32(21)
        if isinstance(value, MercuryError.MusigSignError):
            buf.write_i32(22)
        if isinstance(value, MercuryError.SchnorrSignatureValidationError):
            buf.write_i32(23)
        if isinstance(value, MercuryError.MoreThanOneInputError):
            buf.write_i32(24)
        if isinstance(value, MercuryError.UnkownNetwork):
            buf.write_i32(25)
        if isinstance(value, MercuryError.BackupTransactionDoesNotPayUser):
            buf.write_i32(26)
        if isinstance(value, MercuryError.FeeTooHigh):
            buf.write_i32(27)
        if isinstance(value, MercuryError.FeeTooLow):
            buf.write_i32(28)
        if isinstance(value, MercuryError.OutOfRangeError):
            buf.write_i32(29)
        if isinstance(value, MercuryError.SerdeJsonError):
            buf.write_i32(30)
        if isinstance(value, MercuryError.SecpError):
            buf.write_i32(31)
        if isinstance(value, MercuryError.NoBackupTransactionFound):
            buf.write_i32(32)
        if isinstance(value, MercuryError.Tx1HasMoreThanOneInput):
            buf.write_i32(33)
        if isinstance(value, MercuryError.InvalidSignature):
            buf.write_i32(34)
        if isinstance(value, MercuryError.EmptyWitness):
            buf.write_i32(35)
        if isinstance(value, MercuryError.EmptyWitnessData):
            buf.write_i32(36)
        if isinstance(value, MercuryError.IncorrectChallenge):
            buf.write_i32(37)
        if isinstance(value, MercuryError.InvalidT1):
            buf.write_i32(38)
        if isinstance(value, MercuryError.IncorrectAggregatedPublicKey):
            buf.write_i32(39)
        if isinstance(value, MercuryError.T1MustBeExactly32BytesError):
            buf.write_i32(40)



class _UniffiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeActivity(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeActivity.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeActivity.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeActivity.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeBackupTx(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeBackupTx.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeBackupTx.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeBackupTx.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeCoin(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeCoin.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeCoin.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeCoin.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypePubKeyInfo(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypePubKeyInfo.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypePubKeyInfo.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypePubKeyInfo.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeStatechainInfo(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeStatechainInfo.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeStatechainInfo.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeStatechainInfo.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeToken(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeToken.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeToken.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeToken.read(buf) for i in range(count)
        ]

# Async support

def create_aggregated_address(coin: "Coin",network: "str") -> "AggregatedPublicKey":
    _UniffiConverterTypeCoin.check_lower(coin)
    
    _UniffiConverterString.check_lower(network)
    
    return _UniffiConverterTypeAggregatedPublicKey.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_create_aggregated_address,
        _UniffiConverterTypeCoin.lower(coin),
        _UniffiConverterString.lower(network)))


def create_and_commit_nonces(coin: "Coin") -> "CoinNonce":
    _UniffiConverterTypeCoin.check_lower(coin)
    
    return _UniffiConverterTypeCoinNonce.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_create_and_commit_nonces,
        _UniffiConverterTypeCoin.lower(coin)))


def create_cpfp_tx(backup_tx: "BackupTx",coin: "Coin",to_address: "str",fee_rate_sats_per_byte: "int",network: "str") -> "str":
    _UniffiConverterTypeBackupTx.check_lower(backup_tx)
    
    _UniffiConverterTypeCoin.check_lower(coin)
    
    _UniffiConverterString.check_lower(to_address)
    
    _UniffiConverterUInt64.check_lower(fee_rate_sats_per_byte)
    
    _UniffiConverterString.check_lower(network)
    
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_create_cpfp_tx,
        _UniffiConverterTypeBackupTx.lower(backup_tx),
        _UniffiConverterTypeCoin.lower(coin),
        _UniffiConverterString.lower(to_address),
        _UniffiConverterUInt64.lower(fee_rate_sats_per_byte),
        _UniffiConverterString.lower(network)))


def create_deposit_msg1(coin: "Coin",token_id: "str") -> "DepositMsg1":
    _UniffiConverterTypeCoin.check_lower(coin)
    
    _UniffiConverterString.check_lower(token_id)
    
    return _UniffiConverterTypeDepositMsg1.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_create_deposit_msg1,
        _UniffiConverterTypeCoin.lower(coin),
        _UniffiConverterString.lower(token_id)))


def create_signature(msg: "str",client_partial_sig_hex: "str",server_partial_sig_hex: "str",session_hex: "str",output_pubkey_hex: "str") -> "str":
    _UniffiConverterString.check_lower(msg)
    
    _UniffiConverterString.check_lower(client_partial_sig_hex)
    
    _UniffiConverterString.check_lower(server_partial_sig_hex)
    
    _UniffiConverterString.check_lower(session_hex)
    
    _UniffiConverterString.check_lower(output_pubkey_hex)
    
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_create_signature,
        _UniffiConverterString.lower(msg),
        _UniffiConverterString.lower(client_partial_sig_hex),
        _UniffiConverterString.lower(server_partial_sig_hex),
        _UniffiConverterString.lower(session_hex),
        _UniffiConverterString.lower(output_pubkey_hex)))


def create_transfer_signature(recipient_address: "str",input_txid: "str",input_vout: "int",client_seckey: "str") -> "str":
    _UniffiConverterString.check_lower(recipient_address)
    
    _UniffiConverterString.check_lower(input_txid)
    
    _UniffiConverterUInt32.check_lower(input_vout)
    
    _UniffiConverterString.check_lower(client_seckey)
    
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_create_transfer_signature,
        _UniffiConverterString.lower(recipient_address),
        _UniffiConverterString.lower(input_txid),
        _UniffiConverterUInt32.lower(input_vout),
        _UniffiConverterString.lower(client_seckey)))


def create_transfer_update_msg(x1: "str",recipient_address: "str",coin: "Coin",transfer_signature: "str",backup_transactions: "typing.List[BackupTx]") -> "TransferUpdateMsgRequestPayload":
    _UniffiConverterString.check_lower(x1)
    
    _UniffiConverterString.check_lower(recipient_address)
    
    _UniffiConverterTypeCoin.check_lower(coin)
    
    _UniffiConverterString.check_lower(transfer_signature)
    
    _UniffiConverterSequenceTypeBackupTx.check_lower(backup_transactions)
    
    return _UniffiConverterTypeTransferUpdateMsgRequestPayload.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_create_transfer_update_msg,
        _UniffiConverterString.lower(x1),
        _UniffiConverterString.lower(recipient_address),
        _UniffiConverterTypeCoin.lower(coin),
        _UniffiConverterString.lower(transfer_signature),
        _UniffiConverterSequenceTypeBackupTx.lower(backup_transactions)))


def decode_statechain_address(sc_address: "str") -> "DecodedScAddress":
    _UniffiConverterString.check_lower(sc_address)
    
    return _UniffiConverterTypeDecodedSCAddress.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_decode_statechain_address,
        _UniffiConverterString.lower(sc_address)))


def ffi_verify_transfer_signature(new_user_pubkey: "str",tx0_outpoint: "TxOutpoint",ffi_transfer_msg: "FfiTransferMsg") -> "bool":
    _UniffiConverterString.check_lower(new_user_pubkey)
    
    _UniffiConverterTypeTxOutpoint.check_lower(tx0_outpoint)
    
    _UniffiConverterTypeFFITransferMsg.check_lower(ffi_transfer_msg)
    
    return _UniffiConverterBool.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_ffi_verify_transfer_signature,
        _UniffiConverterString.lower(new_user_pubkey),
        _UniffiConverterTypeTxOutpoint.lower(tx0_outpoint),
        _UniffiConverterTypeFFITransferMsg.lower(ffi_transfer_msg)))


def fii_create_transfer_receiver_request_payload(statechain_info: "StatechainInfoResponsePayload",ffi_transfer_msg: "FfiTransferMsg",coin: "Coin") -> "TransferReceiverRequestPayload":
    _UniffiConverterTypeStatechainInfoResponsePayload.check_lower(statechain_info)
    
    _UniffiConverterTypeFFITransferMsg.check_lower(ffi_transfer_msg)
    
    _UniffiConverterTypeCoin.check_lower(coin)
    
    return _UniffiConverterTypeTransferReceiverRequestPayload.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_fii_create_transfer_receiver_request_payload,
        _UniffiConverterTypeStatechainInfoResponsePayload.lower(statechain_info),
        _UniffiConverterTypeFFITransferMsg.lower(ffi_transfer_msg),
        _UniffiConverterTypeCoin.lower(coin)))


def fii_decrypt_transfer_msg(encrypted_message: "str",private_key_wif: "str") -> "FfiTransferMsg":
    _UniffiConverterString.check_lower(encrypted_message)
    
    _UniffiConverterString.check_lower(private_key_wif)
    
    return _UniffiConverterTypeFFITransferMsg.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_fii_decrypt_transfer_msg,
        _UniffiConverterString.lower(encrypted_message),
        _UniffiConverterString.lower(private_key_wif)))


def fii_validate_tx0_output_pubkey(enclave_public_key: "str",ffi_transfer_msg: "FfiTransferMsg",tx0_outpoint: "TxOutpoint",tx0_hex: "str",network: "str") -> "bool":
    _UniffiConverterString.check_lower(enclave_public_key)
    
    _UniffiConverterTypeFFITransferMsg.check_lower(ffi_transfer_msg)
    
    _UniffiConverterTypeTxOutpoint.check_lower(tx0_outpoint)
    
    _UniffiConverterString.check_lower(tx0_hex)
    
    _UniffiConverterString.check_lower(network)
    
    return _UniffiConverterBool.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_fii_validate_tx0_output_pubkey,
        _UniffiConverterString.lower(enclave_public_key),
        _UniffiConverterTypeFFITransferMsg.lower(ffi_transfer_msg),
        _UniffiConverterTypeTxOutpoint.lower(tx0_outpoint),
        _UniffiConverterString.lower(tx0_hex),
        _UniffiConverterString.lower(network)))


def fii_verify_latest_backup_tx_pays_to_user_pubkey(ffi_transfer_msg: "FfiTransferMsg",client_pubkey_share: "str",network: "str") -> "bool":
    _UniffiConverterTypeFFITransferMsg.check_lower(ffi_transfer_msg)
    
    _UniffiConverterString.check_lower(client_pubkey_share)
    
    _UniffiConverterString.check_lower(network)
    
    return _UniffiConverterBool.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_fii_verify_latest_backup_tx_pays_to_user_pubkey,
        _UniffiConverterTypeFFITransferMsg.lower(ffi_transfer_msg),
        _UniffiConverterString.lower(client_pubkey_share),
        _UniffiConverterString.lower(network)))


def generate_mnemonic() -> "str":
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_generate_mnemonic,))


def get_blockheight(bkp_tx: "BackupTx") -> "int":
    _UniffiConverterTypeBackupTx.check_lower(bkp_tx)
    
    return _UniffiConverterUInt32.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_get_blockheight,
        _UniffiConverterTypeBackupTx.lower(bkp_tx)))


def get_new_coin(wallet: "Wallet") -> "Coin":
    _UniffiConverterTypeWallet.check_lower(wallet)
    
    return _UniffiConverterTypeCoin.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_get_new_coin,
        _UniffiConverterTypeWallet.lower(wallet)))


def get_new_key_info(server_public_key_hex: "str",coin: "Coin",statechain_id: "str",tx0_outpoint: "TxOutpoint",tx0_hex: "str",network: "str") -> "NewKeyInfo":
    _UniffiConverterString.check_lower(server_public_key_hex)
    
    _UniffiConverterTypeCoin.check_lower(coin)
    
    _UniffiConverterString.check_lower(statechain_id)
    
    _UniffiConverterTypeTxOutpoint.check_lower(tx0_outpoint)
    
    _UniffiConverterString.check_lower(tx0_hex)
    
    _UniffiConverterString.check_lower(network)
    
    return _UniffiConverterTypeNewKeyInfo.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_get_new_key_info,
        _UniffiConverterString.lower(server_public_key_hex),
        _UniffiConverterTypeCoin.lower(coin),
        _UniffiConverterString.lower(statechain_id),
        _UniffiConverterTypeTxOutpoint.lower(tx0_outpoint),
        _UniffiConverterString.lower(tx0_hex),
        _UniffiConverterString.lower(network)))


def get_output_address_from_tx0(tx0_outpoint: "TxOutpoint",tx0_hex: "str",network: "str") -> "str":
    _UniffiConverterTypeTxOutpoint.check_lower(tx0_outpoint)
    
    _UniffiConverterString.check_lower(tx0_hex)
    
    _UniffiConverterString.check_lower(network)
    
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_get_output_address_from_tx0,
        _UniffiConverterTypeTxOutpoint.lower(tx0_outpoint),
        _UniffiConverterString.lower(tx0_hex),
        _UniffiConverterString.lower(network)))


def get_partial_sig_request(coin: "Coin",block_height: "int",initlock: "int",interval: "int",fee_rate_sats_per_byte: "int",qt_backup_tx: "int",to_address: "str",network: "str",is_withdrawal: "bool") -> "PartialSignatureMsg1":
    _UniffiConverterTypeCoin.check_lower(coin)
    
    _UniffiConverterUInt32.check_lower(block_height)
    
    _UniffiConverterUInt32.check_lower(initlock)
    
    _UniffiConverterUInt32.check_lower(interval)
    
    _UniffiConverterUInt32.check_lower(fee_rate_sats_per_byte)
    
    _UniffiConverterUInt32.check_lower(qt_backup_tx)
    
    _UniffiConverterString.check_lower(to_address)
    
    _UniffiConverterString.check_lower(network)
    
    _UniffiConverterBool.check_lower(is_withdrawal)
    
    return _UniffiConverterTypePartialSignatureMsg1.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_get_partial_sig_request,
        _UniffiConverterTypeCoin.lower(coin),
        _UniffiConverterUInt32.lower(block_height),
        _UniffiConverterUInt32.lower(initlock),
        _UniffiConverterUInt32.lower(interval),
        _UniffiConverterUInt32.lower(fee_rate_sats_per_byte),
        _UniffiConverterUInt32.lower(qt_backup_tx),
        _UniffiConverterString.lower(to_address),
        _UniffiConverterString.lower(network),
        _UniffiConverterBool.lower(is_withdrawal)))


def get_tx0_outpoint(backup_transactions: "typing.List[BackupTx]") -> "TxOutpoint":
    _UniffiConverterSequenceTypeBackupTx.check_lower(backup_transactions)
    
    return _UniffiConverterTypeTxOutpoint.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_get_tx0_outpoint,
        _UniffiConverterSequenceTypeBackupTx.lower(backup_transactions)))


def get_user_backup_address(coin: "Coin",network: "str") -> "str":
    _UniffiConverterTypeCoin.check_lower(coin)
    
    _UniffiConverterString.check_lower(network)
    
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_get_user_backup_address,
        _UniffiConverterTypeCoin.lower(coin),
        _UniffiConverterString.lower(network)))


def handle_deposit_msg_1_response(coin: "Coin",deposit_msg_1_response: "DepositMsg1Response") -> "DepositInitResult":
    _UniffiConverterTypeCoin.check_lower(coin)
    
    _UniffiConverterTypeDepositMsg1Response.check_lower(deposit_msg_1_response)
    
    return _UniffiConverterTypeDepositInitResult.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_handle_deposit_msg_1_response,
        _UniffiConverterTypeCoin.lower(coin),
        _UniffiConverterTypeDepositMsg1Response.lower(deposit_msg_1_response)))


def new_backup_transaction(encoded_unsigned_tx: "str",signature_hex: "str") -> "str":
    _UniffiConverterString.check_lower(encoded_unsigned_tx)
    
    _UniffiConverterString.check_lower(signature_hex)
    
    return _UniffiConverterString.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_new_backup_transaction,
        _UniffiConverterString.lower(encoded_unsigned_tx),
        _UniffiConverterString.lower(signature_hex)))


def validate_address(address: "str",network: "str") -> "bool":
    _UniffiConverterString.check_lower(address)
    
    _UniffiConverterString.check_lower(network)
    
    return _UniffiConverterBool.lift(_rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_validate_address,
        _UniffiConverterString.lower(address),
        _UniffiConverterString.lower(network)))


def verify_blinded_musig_scheme(backup_tx: "BackupTx",tx0_hex: "str",statechain_info: "StatechainInfo") -> None:
    _UniffiConverterTypeBackupTx.check_lower(backup_tx)
    
    _UniffiConverterString.check_lower(tx0_hex)
    
    _UniffiConverterTypeStatechainInfo.check_lower(statechain_info)
    
    _rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_verify_blinded_musig_scheme,
        _UniffiConverterTypeBackupTx.lower(backup_tx),
        _UniffiConverterString.lower(tx0_hex),
        _UniffiConverterTypeStatechainInfo.lower(statechain_info))


def verify_transaction_signature(tx_n_hex: "str",tx0_hex: "str",fee_rate_tolerance: "int",current_fee_rate_sats_per_byte: "int") -> None:
    _UniffiConverterString.check_lower(tx_n_hex)
    
    _UniffiConverterString.check_lower(tx0_hex)
    
    _UniffiConverterUInt32.check_lower(fee_rate_tolerance)
    
    _UniffiConverterUInt32.check_lower(current_fee_rate_sats_per_byte)
    
    _rust_call_with_error(_UniffiConverterTypeMercuryError,_UniffiLib.uniffi_mercurylib_fn_func_verify_transaction_signature,
        _UniffiConverterString.lower(tx_n_hex),
        _UniffiConverterString.lower(tx0_hex),
        _UniffiConverterUInt32.lower(fee_rate_tolerance),
        _UniffiConverterUInt32.lower(current_fee_rate_sats_per_byte))


__all__ = [
    "InternalError",
    "CoinStatus",
    "MercuryError",
    "Activity",
    "AggregatedPublicKey",
    "BackupTx",
    "Coin",
    "CoinNonce",
    "CoinStatusParseError",
    "DecodedScAddress",
    "DepositInitResult",
    "DepositMsg1",
    "DepositMsg1Response",
    "FfiTransferMsg",
    "GetMsgAddrResponsePayload",
    "InfoConfig",
    "KeyListResponsePayload",
    "KeyUpdateResponsePayload",
    "NewKeyInfo",
    "PartialSignatureMsg1",
    "PartialSignatureRequestPayload",
    "PartialSignatureResponsePayload",
    "PubKeyInfo",
    "ServerConfig",
    "ServerPublicNonceResponsePayload",
    "Settings",
    "SignFirstRequestPayload",
    "SignFirstResponsePayload",
    "StatechainBackupTxs",
    "StatechainInfo",
    "StatechainInfoResponsePayload",
    "Token",
    "TransferReceiverGetResponsePayload",
    "TransferReceiverRequestPayload",
    "TransferReceiverResponsePayload",
    "TransferSenderRequestPayload",
    "TransferSenderResponsePayload",
    "TransferUpdateMsgRequestPayload",
    "TxOutpoint",
    "Wallet",
    "create_aggregated_address",
    "create_and_commit_nonces",
    "create_cpfp_tx",
    "create_deposit_msg1",
    "create_signature",
    "create_transfer_signature",
    "create_transfer_update_msg",
    "decode_statechain_address",
    "ffi_verify_transfer_signature",
    "fii_create_transfer_receiver_request_payload",
    "fii_decrypt_transfer_msg",
    "fii_validate_tx0_output_pubkey",
    "fii_verify_latest_backup_tx_pays_to_user_pubkey",
    "generate_mnemonic",
    "get_blockheight",
    "get_new_coin",
    "get_new_key_info",
    "get_output_address_from_tx0",
    "get_partial_sig_request",
    "get_tx0_outpoint",
    "get_user_backup_address",
    "handle_deposit_msg_1_response",
    "new_backup_transaction",
    "validate_address",
    "verify_blinded_musig_scheme",
    "verify_transaction_signature",
]

